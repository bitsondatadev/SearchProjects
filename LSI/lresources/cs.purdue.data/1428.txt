<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/spa/Compression/2D-PMC.html </DOCNO>
<html> <Title>2D-Pattern Matching Based Data Compression</title> <BODY BGCOLOR="#ffffff"> <LEFTMARGIN=0> <MARGIN=0> <font face="Helvetica"> <h1> <FONT SIZE="5"><P ALIGN="RIGHT"> 2D-Pattern Matching Image and Video Compression </font> </h1> <strong> <FONT SIZE="2"><P ALIGN="RIGHT"> Personnel: </a>, Marc Alzina, <a href = "http://www.cs.purdue.edu/faculty/ayg.html"> Ananth Grama</a> <a href = "http://www.cs.purdue.edu/faculty/spa.html"> Wojciech Szpankowski </a> </strong> <br> <br> </font> <FONT SIZE="3"><P ALIGN="JUSTIFY"> The central theme of a lossy extension of Lempel-Ziv algorithm is the notion of approximate repetitiveness. If a portion of data recurs in an approximate sense, then subsequent occurrences can be stored as direct or indirect references to the first occurrence. This approximate recurrence of data may not be contiguous. Somewhat surprisingly, this theme of exploiting approximate repetitiveness is uniformly applicable to multimedia data from various sources such as text, images, video, and even audio. However, approximate repetitiveness can be hidden in various forms for different types of media. Therefore, one must consider different distortion measures. This is in contrast with current state-of-the-art, where a different approach is used for compressing each of these types of data. Using the theoretical underpinning of Luczak and Szpankowski <A HREF="../papers/lossyLZ.ps" > " A Suboptimal Lossy Data Compression Based on Approximate Pattern Matching</A>, Atallah, G'{e}nin and Szpankowski implemented a lossy scheme for image compression. This scheme, called <A HREF="../software.html">Pattern Matching Image Compression</A> was based on one-dimensional pattern matching enhanced with some salient features. It was shown that for high quality images PMIC scheme is competitive with JPEG and wavelet image compression up to 1 bpp. However, the superiority of PMIC for decompression (PMIC does not require any computation since it basically only reads data) may turn out to be a crucial advantage in practice where asymmetric compression/decompression is a desirable feature (e.g., video). However, a bit rate of 1 bpp is not that interesting from a practical point of view since most image compression applications require bit rates of 0.5 bpp to 0.25 bpp. In <A HREF="../papers/dcc99.ps"> 2D-Pattern Matching Image and Video Compression: Preliminary Results </A>, we describe a new implementation based on two-dimensional approximate pattern matching that achieves compression of up to 0.25 bpp for images while preserving other desirable properties of PMIC. We call this scheme 2D-PMIC. You can view some 2D-PMIC still images on this page (see below). We also use this idea to develop a new compression scheme for video data that uses the previous (coded) frame in the group of frames (GOP) as a database. Our preliminary experimental results (view them below) exceed even our expectations: we obtain high quality video with bit rates of $0.15-0.4$ Mbps (without the first frame). Theoretical underpinning of these results as well as algorithms and experimental studies can be found in <A HREF="../papers/2dpmc.ps"> 2D-Pattern Matching Image and Video Compression: Theory, Algorithms, and Experiments</A> </font> <h3>Implementation Algorihmic Challenge: </h3> The implementation of 2D-PMIC is a challenging problem from the algorithmic standpoint. Finding an efficient data structure for approximate search of multidimensional sets in a huge multidimensional database, is an interesting problem in itself. We use a set of modified k-d trees enhanced by generalized run length coding for approximate search. A key issue for high quality image and video compression is the design of an adaptive distortion measure that automatically adjusts its maximum distortion to produce perceptually high quality results. We propose a few solutions and examine their performance in <A HREF="../papers/2dpmc.ps"> 2D-Pattern Matching Image and Video Compression: Theory, Algorithms, and Experiments</A> <h4>Compression Results for Still Images</h4> A summary of the performance of Comprime and its comparison to JPEG is as follows (images will open in new browser window): <br> <br> <center> <table border="1"> <tr> <td> <font face="Helvetica"> original </td> <td> <font face="Helvetica"> 0.25bpp </td> <td> <font face="Helvetica"> 0.5bpp </td> <td> <font face="Helvetica"> 1bpp </td> <td> <font face="Helvetica"> 2bpp </td> </tr> <tr> <td> <font face="Helvetica"> <a href="dc/img/banner.html" target="demo">Banner</a></td> <td> <font face="Helvetica"> <a href="dc/banner_025/view.html" target="demo">view</a></td> <td> <font face="Helvetica"> <a href="dc/banner_05/view.html" target="demo">view</a></td> <td> <font face="Helvetica"> <a href="dc/banner_1/view.html" target="demo">view</a></td> <td> <font face="Helvetica"> <a href="dc/banner_2/view.html" target="demo">view</a></td> </tr> <tr> <td> <font face="Helvetica"> <a href="dc/img/basselope.html" target="demo">Basselope</a></td> <td> <font face="Helvetica"> <a href="dc/basselope_025/view.html" target="demo">view</a></td> <td> <font face="Helvetica"> <a href="dc/basselope_05/view.html" target="demo">view</a></td> <td> <font face="Helvetica"> <a href="dc/basselope_1/view.html" target="demo">view</a></td> <td> <font face="Helvetica"> <a href="dc/basselope_2/view.html" target="demo">view</a></td> </tr> <tr> <td> <font face="Helvetica"> <a href="dc/img/lena.html" target="demo">Lena</a></td> <td> <font face="Helvetica"> <a href="dc/lena_025/view.html" target="demo">view</a></td> <td> <font face="Helvetica"> <a href="dc/lena_05/view.html" target="demo">view</a></td> <td> <font face="Helvetica"> <a href="dc/lena_1/view.html" target="demo">view</a></td> <td> <font face="Helvetica"> <a href="dc/lena_2/view.html" target="demo">view</a></td> </tr> <tr> <td> <font face="Helvetica"> <a href="dc/img/sanf.html" target="demo">San Francisco</a></td> <td> <font face="Helvetica"> <a href="dc/sanf_025/view.html" target="demo">view</a></td> <td> <font face="Helvetica"> <a href="dc/sanf_05/view.html" target="demo">view</a></td> <td> <font face="Helvetica"> <a href="dc/sanf_1/view.html" target="demo">view</a></td> <td> <font face="Helvetica"> <a href="dc/sanf_2/view.html" target="demo">view</a></td> </tr> </table> </center> <h4>Compression Results for Video Streams</h4> As mentioned above, in the case of video streams, the database corresponds to an image in the past. Tbale below summarizes our results that can be viewed below (to view them you need to have Avi or QuickTime software installed). <BR><BR> <center> <TABLE WIDTH="50%" BORDER> <CAPTION> </CAPTION> <TH WIDTH="50%"> VIDEO <TH WIDTH="15%"> MBPS <TH WIDTH="15%"> PSNR <TR > <TD > <a href = "claire_hq.avi"> Claire_High Quality </a> <TD> 0.14 <TD> 33.7 </tr> <tr> <td> <a href = "claire_lq.avi"> Claire_Low Quality </a> <TD> 0.07 <TD> 31.0 </tr> <tr> <td> <a href = "ping_pong_hq.avi"> Ping Pong_High Quality </a> <TD> 0.40 <TD> 24.0 </tr> <tr> <td> <a href = "ping_pong_lq.avi"> Ping Pong_Low Quality </a> <TD> 0.26 <TD> 22.6 </tr> </TABLE> </center> <BR> To see more video clips click <a href = "http://www.cs.purdue.edu/homes/alzina/test_samples/"> here </a>. </a>.
</DOC>
