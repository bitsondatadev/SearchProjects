<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/dec/essay.topic.generator.html </DOCNO>
<html><head><title>CS Topic Generator</title> <script> // // Initialize the arrays for the columns of buzzwords // buzz1 = new Array ( "integrated", "parallel", "virtual", "interactive", "responsive", "synchronized", "balanced", "virtual", "meta-level", "optimized", "active", "parameterized", "conceptual", "scalable", "dynamic", "high-level", "collaborative", "type-safe" ); buzz2 = new Array( "mobile", "functional", "programmable", "distributed", "logical", "digital", "concurrent", "knowledge-based", "multimedia", "binary", "object-oriented", "secure", "high-speed", "real-time", "functional", "parallelizing", "watermarking", "proxy" ); buzz3 = new Array( "network", "preprocessor", "compiler", "system", "interface", "protocol", "architecture", "database", "algorithm", "toolkit", "display", "technology", "solution", "language", "agent", "theorem prover", "work cluster", "cache" ); conn = new Array( "for", "related to", "derived from", "applied to", "embedded in" ); </script></head> <body> <center> <h1> A CS Research Topic Generator <br> or <br> How To pick A Worthy Topic In 10 Seconds <br> </h1> <br> </center> <br> <p> Computer Science is facing a major roadblock to further research. The problem is most evident with students, but afflicts many researchers as well: people simply have a tough time inventing research topics that sound sufficiently profound and exciting. Many PhD students waste needless years simply coming up with a thesis topic. And researchers often resort to reading documents from government grant agencies so they will know what to work on for the next proposal! </p><p> Good news for the CS community: the problem has at last been solved. The table below provides the answer. <br> <br> </p><center> <script> var i; document.write("<TABLE WIDTH=400>"); document.write("<TR>"); document.write("<TH WIDTH=33%> Column 1 <TH WIDTH=33%> Column 2 <TH WIDTH=33%> Column 3"); document.write("<BR>"); document.write("<TR>"); document.write(" <TH> <HR> <TH> <HR> <TH> <HR>"); for (i=0 ; i<buzz1.length ; i++) { document.write("<TR>"); var j=" <TD> " + buzz1[i] + " <TD> " + buzz2[i] + " <TD> " + buzz3[i]; document.write(j); } </script> </table> </center> <br> <br> <p> To generate a technical phrase, randomly choose one item from each column. For example, selecting <em>synchronized</em> from column 1, <em>secure</em> from column 2, and <em>protocol</em> from column 3 produces: <br> <br> </p><center>A synchronized secure protocol</center> <br> <br> Best of all, two phrases can be combined with simple connectives, making the result suitable for the most demanding use. Possible connectives include: <br> <br> <center> <table width="120"> <tr> <script> var i; for (i=0 ; i<conn.length ; i++) { document.write("<TR>"); document.write("<TD ALIGN=CENTER>" + conn[i]); } </script> </table> </center> <br> <br> For example, one could generate a thesis title by selecting a second phrase and a connective: <br> <br> <center> A synchronized secure protocol for an interactive knowledge-based system </center> <br> <br> The technique described here for selecting a research topic is far superior to the method currently in use because it can be automated -- a computer program can be written to select a phrase at random whenever one is needed. Furthermore, thanks to an enchancement by Ian Stark at The University of Edinburgh in Scotland, it is possible to automate an additional step in the research process by performing an automated literature search. Try the system by first generating a random topic and then performing an automated literature search. <br> <br> <script> // // Javascript implementation of the algorithm described previously // // // Compute article. Return "an" if first character of "word" is a vowel, // otherwise return "a". If "capitalize" is true, then capitalize first letter. // function computeArticleBasedOnWord( word, capitalize ) { // Check the first charater of word and use "An" instead of "A" if it is a vowel vowels = "aeiou"; pad = ""; for ( i = 0; i < vowels.length; i++) { if ( word.charAt(0) == vowels.charAt(i) ) { pad = "n"; } } var article; if ( capitalize ) { article = "A" + pad; } else { article = "a" + pad; } return article; } // // Function to generate the random topic // function generateRandomTopic(form) { // Choose random words from the four columns c1 = buzz1[ Math.floor(Math.random() * buzz1.length ) ]; c2 = buzz2[ Math.floor(Math.random() * buzz2.length ) ]; c3 = buzz3[ Math.floor(Math.random() * buzz3.length ) ]; c4 = conn[ Math.floor(Math.random() * conn.length ) ]; c5 = buzz1[ Math.floor(Math.random() * buzz1.length ) ]; c6 = buzz2[ Math.floor(Math.random() * buzz2.length ) ]; c7 = buzz3[ Math.floor(Math.random() * buzz3.length ) ]; // Form topic according to algorithm form.elements["RandomTopic"].value = computeArticleBasedOnWord( c1, true ) + " " + c1 + " " + c2 + " " + c3 + " " + c4 + " " + computeArticleBasedOnWord( c5, false ) + " " + c5 + " " + c6 + " " + c7; } </script> <br> <center> <form name="Random Topic Generator"> <input name="RandomTopicButton" value="Generate A Random Topic" onclick="generateRandomTopic(this.form);LiteratureReviewButton.disabled=false;" type="button"> <p> <textarea name="RandomTopic" rows="1" cols="85"></textarea> </p><p> <input name="LiteratureReviewButton" value="Perform Literature Review" disabled="true" onclick="location.href='http://scholar.google.com/scholar?q='+RandomTopic.value" ;="" type="button"> </p></form></center> <br> <br> <br> <br> <br> </body></html> </body></html>
</DOC>
