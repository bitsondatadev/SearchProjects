<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/ayg/CS251_FALL_99/ASSN_99/hw5/hw5.html </DOCNO>
<html> <head> <title>Data Structures Homework 5, Fall 1999</title> </head> <body bgcolor="#FFFFFF"> <font align = left face = helvetica> <h1>Data Structures Homework 5, Fall 1999</h1> <h2>Due: Fri, Oct 29, 12 PM using turnin </h2> Absolutely no late submissions accepted since solutions will be posted soon after the deadline. <br> <br> In this project, you will implement a locator dictionary ADT using AVL trees. You will then modify your checked list class in the puzzle to use the AVL tree ADT. Construct a concrete class, AVLDictionary, which implements the following interface: <pre> public interface LocatorDictionary { public int size(); public boolean isEmpty(); public Locator find(Object k); // Return locator for item (k',e) w/ k=k' public Locator insert(Object k, Object o); // Insert (k,o), get back locator public Object remove(Locator l); // Remove item at locator l public Object replaceKey(Locator l, Object k); // Replace key at locator l public Object replaceElement(Locator l, Object k); // Replace element at locator l } </pre> Your class should have a constructor that accepts a Comparator object and builds an initially-empty AVL tree. <p> Your locator should support the following interface: <pre> public interface Locator { public Object key(); // Return the key for this locator public Object element(); // Return the element for this locator public Object containter(); // Return the container this locator is in } </pre> You will need to implement this interface with a concrete class with a name like AVLLocator. <p> <strong> Some students have asked to use the Position interface instead of the Locator interface. This is okay with me as well. Using the Locator Interface will require you to replace all instances of Position with Locator in the files that you may be reusing from hw4. If you use the Position class, this is not necessary. Notice that the Position and Locator interfaces are almost identical, except for a key method that can be called from the element class if you use the Position interface. </strong> <br> <br> The comparator interface is: <pre> public interface Comparator { boolean isLess(Object a, Object b); boolean isLessOrEqual(Object a, Object b); boolean areEqual(Object a, Object b); boolean isGreater(Object a, Object b); boolean isGreaterOrEqual(Object a, Object b); } </pre> Use the rest of the classes from the solution to the previous homework for implementing and testing solution to this homework. <br> <br> The board itself is a key for searching in the AVL tree.. you can convert the board into a string and use the following comparators. The comparator interface is: <pre> public interface Comparator { boolean isLessThan(Object a, Object b); boolean isLessThanOrEqualTo(Object a, Object b); boolean isEqualTo(Object a, Object b); boolean isGreaterThan(Object a, Object b); boolean isGreaterThanOrEqualTo(Object a, Object b); boolean isComparable(Object a); } </pre> and the string comparator class is <pre> public class StringComparator implements Comparator { boolean isLessThan(Object a, Object b) { return ((String)b).compareTo((String)a) < 0; } boolean isLessThanOrEqualTo(Object a, Object b) { return ((String)b).compareTo((String)a) <= 0; } boolean isEqualTo(Object a, Object b) { return ((String)b).compareTo((String)a) == 0; } boolean isGreaterThan(Object a, Object b) { return ((String)b).compareTo((String)a) > 0; } boolean isGreaterThanOrEqualTo(Object a, Object b) { return ((String)b).compareTo((String)a) >= 0; } boolean isComparable(Object a) { if(a == null) return false; else { try { String i1 = (String) a; } catch(ClassCastException e) { return false; } } return true; } } </pre> </body></html> </body></html>
</DOC>
