<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/ayg/CS590D/assignments/two.html </DOCNO>
<HTML><HEAD><TITLE>Assignment #2 (CS 590D)</TITLE></HEAD> <BODY BGCOLOR="ffffff"> </HEAD> <BR> <H2>Assignment #2</H2> <B>Date Assigned:</B> Monday, Feb. 23, 1998<BR> <B>Date Due:</B> Tuesday, Mar. 17, 1998<BR> <HR NOSHADE SIZE=2> <P><!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"></P> <ol> <li>Give examples (one each) of data mining problems where<BR> <BR> <ol> <li>HOODG performs better than ID3<BR> <li>PROGOL performs better than ID3<BR> <li>ID3 performs better than PROGOL<BR> <li>A feed forward neural network is best<BR> </oL><BR> "Performs better" can be taken to refer to any performance criteria such as simplicity, interpretability, accuracy etc., but please state which one(s) you are referring to.<BR> <BR> <li>Consider the <a href="ftp://ftp.ics.uci.edu/pub/machine-learning-databases/iris/">IRIS data set</A>. Select 3-4 algorithms from MLC++ (other than ID3) to classify this data set and perform first order stacking with them, this time using ID3 to classify the newly formed instances. Visualize the tree produced by ID3 and determine if you could make qualitative statements about the relative efficacies of the algorithms that you selected in the first place (Stacking is described in the handout "Decision Trees and Instance Based Classifiers", Quinlan, page 533). A copy of this dataset suitable for use with MLC++ is available in the <tt><B>/u/u61/cse/MLC++/mlc/db/</B></tt> directory. <BR> <BR> <li><i>No programming/code is required for this question, though you might submit them for extra credit</I></P> Goldbach's conjecture states that every even number greater than two can be expressed as the sum of two primes. There is a well known program called AM (Automated Mathematician) that discovered this, but its internal design is beyond the scope of this course. </P> Instead, suggest a scheme/some combination of schemes that could lead us to this conclusion. i.e., you want to data-mine that <pre><B> For all even x, there exist primes y and z such that x=y+z, if x>2. </B></pre> Assume that all you know is the notion of numbers, the notion of ordinal operators (<,>,<=,>= etc.), and concepts such as "even" and "prime". In particular, you can assume the existence of predicates such as <tt><B>prime(n)</B></tt> that returns true if the argument is a prime and false otherwise. Likewise, you can assume the availability of <tt><B>even(n)</B></tt>. (In reality, there are more predicates available to you, like <tt><B>odd(n)</B></tt>, <tt><B>composite(n)</B></tt>, and so on; part of the task is to figure out how exactly you narrow down on <tt><B>even</B></tt> and <tt><b>prime</B></tt>, as potential interesting concepts.)</P> You can use anything from ILP, decision trees, nearest neighbor methods, neural networks, genetic algorithms or a combination of these. You have to make sure that your design is (i) powerful enough to express the above concept, (ii) can be expected to converge to the same. </ol> <BR> </P> <HR NOSHADE SIZE=2> </P> <A HREF="../index.html"><IMG SRC="../images/returnhome.gif" ALT="Return Home" BORDER=0></A> </BODY></HTML> </BODY></HTML>
</DOC>
