<DOC>
<DOCNO> http://www.cs.purdue.edu/about_us/annual_reports/97/research/ftclsds.html </DOCNO>
<!-- Generated by Harlequin Webmaker 2.1.3; Transducer 1.0.2 --> <HTML> <HEAD> <TITLE> Fault-Tolerant Computing in large-Scale Distributed Systems</TITLE> </HEAD> <BODY> <H1> Fault-Tolerant Computing in large-Scale Distributed Systems</H1> Principal Investigator: <A HREF="../faculty/park.html">Kihong Park</A><P> <P> <IMG SRC="goldRule.gif" width =100%> <P> Achieving various forms of fault-tolerance in large-scale distributed systems---a prime example being the Internet---has become an important problem. Using a relaxed definition of faults, which includes temporary congestion of servers and other transient adverse conditions, we seek to design distributed control algorithms which are resilient when subject to certain patterns of worst-case faults called k-sparse errors. Sparsity has a recursive definition which roughly says that bad events are well-separated in space-time, and space-time locii where this condition is violated can be covered by small balls which are then recursively well-separated in space-time at the next scale and so on. Of intense theoretical interest is the question whether simple distributed algorithms can be designed which remain fault-tolerant in the presence of <it>k</it>-sparse errors, locally containing and correcting faults up to level <it>k</it>. Technically, this involves proving ergodicity and mixing rate of both finite and infinite systems. On a more practical side, the goal is to implement local algorithms on the Internet for dynamic server allocation which can tolerate <it>k</it>-sparse worst-case server down times or congestion, fault-tolerant routing and information access, intrusion detection in computer security and containment of its spread, among other applications. <P> <IMG SRC="goldRule.gif" width =100%> </BODY> </HTML> </HTML>
</DOC>
