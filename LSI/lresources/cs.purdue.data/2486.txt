<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/cs490t/projects/games/ </DOCNO>
<h1>Animator</h1> <b>Team Members: </b> Greg McMullen & Lailah Jackson <br><br> <b>Goal: </b> To facilitate a way for a user to create animations on a tablet PC. <br><br> <b>Description: </b> This program allows users to create GIF images or GIF animations with an easy-to-use interface. Features include: multiple drawing tools, multi-color support, basic geometric shape creation, and full use of the Microsoft.Ink SDK. <br><br> Current ScreenShot<br> <img src="animatorImage.GIF"> <b>Download Instructions: </b> Click on the link below to download the installation file.<br><br> <b><a href="Setup.msi">Installation File</a></b><br><br> <b>User Documentation: </b> To start creating a GIF file, just open the program which should be located under the start menu under Animator, and start drawing. To save an individual GIF, save a slide. To save an animated GIF, save the whole presentation as a GIF. Both of these options are located under the "File" menu. Presentations and individual slides can be opened via this menu as well. <br><br> <b>Files:</b> Animator.exe - The main executable<br> microsoft.ink.dll - Library that allows use of the Microsoft.Ink SDK<br><br> <b>Sources: </b> Unzip the sources from the link below and open the Animator.sln in Visual Studio. Click the build button and the sources should build.<br><br> <b><a href="Animator.zip">Sources Zip File</a></b><br><br><br><br> <b><u>PROGRAMMERS DOCUMENTATION</u></b><br><br> <b>Classes:</b> mainWindow - This is the only class and as a result it contains all the code<br><br> <b><u>Methods</u></b><br><br> <b>void init_currLabel(int location, bool newSlide)</b><br> Initializes the Label object whenever a new slide is created at <i>location</i> in the current presentation.<br><br> <b>List<byte[]> serializeInk()</b><br> Serializes an Ink object into a savable binary format.<br><br> <b>void colorScreen(Color color)</b><br> Colors the background with ink that's of color <i>color</i>.<br><br> <b>void clearScreen()</b><br> Clears the screen of all data and resets the scrollbar back to it's inital position.<br><br> <b>void newSlide_Click(object sender, EventArgs e)</b><br> Adds a new slide after the current slide.<br><br> <b>void newPresentation_Click(object sender, EventArgs e)</b><br> Clears the screen and initializes a new presentation, which contains only one slide initially.<br><br> <b>void openSlide_Click(object sender, EventArgs e)</b><br> Opens a new slide from the file system and replaces the current slide with it.<br><br> <b>void openPresentation_Click(object sender, EventArgs e)</b><br> Clears the screen and loads a new .anim file from disk.<br><br> <b>void closeSlide_Click(object sender, EventArgs e)</b><br> Closes the current slide and removes it from the presentation.<br><br> <b>void closePresentation_Click(object sender, EventArgs e)</b><br> Closes the current presentation by clearing the screen.<br><br> <b>void saveSlide_Click(object sender, EventArgs e)</b><br> Saves the current slide as a GIF file<br><br> <b>void savePresentation_Click(object sender, EventArgs e)</b><br> Saves the current presentation as a .anim file<br><br> <b>void saveAnimatedGIF_Click(object sender, EventArgs e)</b><br> Saves the current presentation as an animated GIF file<br><br> <b>void exitToolStripMenuItem_Click(object sender, EventArgs e)</b><br> Closes the application.<br><br> <b>void copyToolStripMenuItem_Click(object sender, EventArgs e)</b><br> Copies the current ink selection to the clipboard.<br><br> <b>void cutToolStripMenuItem_Click(object sender, EventArgs e)</b><br> Copies the current ink selection to the clipboard and removes it from the current slide<br><br> <b>void pasteToolStripMenuItem_Click(object sender, EventArgs e)</b><br> Pastes ink from the clipboard to the current slide and selects it.<br><br> <b>void rotateToolStripMenuItem_Click(object sender, EventArgs e)</b><br> Rotates the current ink selection 15 degrees.<br><br> <b>void animateToolStripMenuItem_Click(object sender, EventArgs e)</b><br> "Animates" the current slides by cycling through all slides with the scrollbar.<br><br> <b>void aboutToolStripMenuItem_Click(object sender, EventArgs e)</b><br> Displays the about information for this program.<br><br> <b>void pencilButton_Click(object sender, EventArgs e)</b><br> Changes the drawing style to that of a pencil (thin with no pressure sensitivity)<br><br> <b>void markerThin_Click(object sender, EventArgs e)</b><br> Changes the drawing style to that of a thin marker.<br><br> <b>void markerMedium_Click(object sender, EventArgs e)</b><br> Changes the drawing style to that of a medium-size marker.<br><br> <b>void markerThick_Click(object sender, EventArgs e)</b><br> Changes the drawing style to that of a thick marker.<br><br> <b>void pointEraserButton_Click(object sender, EventArgs e)</b><br> Changes the cursor to an eraser and erases points rather than strokes.<br><br> <b>void penStrokeEraserButton_Click(object sender, EventArgs e)</b><br> Changes the cursor to an eraser and erases strokes rather than points.<br><br> <b>void colorButton_Click(object sender, EventArgs e)</b><br> Allows the user the select the current color for all drawing functions.<br><br> <b>void lineButton_Click(object sender, EventArgs e)</b><br> Allows the user to draw a straight line by selecting two points on the drawing area.<br><br> <b>void beginDrag(object sender, MouseEventArgs e)</b><br> Records the first point clicked in a mouse drag event.<br><br> <b>void endDragLine(Object sender, MouseEventArgs e)</b><br> Records the last point clicked in a mouse drag event.<br><br> <b>void rectangleOutline_Click(object sender, EventArgs e)</b><br> Draws an open (unfilled) rectangle on the drawing area by getting user input via a drag event.<br><br> <b>void rectangleSolid_Click(object sender, EventArgs e)</b><br> Draws a solid (filled) rectangle on the drawing area by getting user input via a drag event<br><br> <b>void endDragRectangle(object sender, MouseEventArgs e)</b><br> Performs the actual drawing of the rectangle using the drag events to get start and end points.<br><br> <b>void circleOutline_Click(object sender, EventArgs e)</b><br> Draws an open (unfilled) circle on the drawing area by getting user input via a drag event<br><br> <b>void circleSolid_Click(object sender, EventArgs e)</b><br> Draws an solid (filled) circle on the drawing area by getting user input via a drag event<br><br> <b>void endDragCircle(object sender, MouseEventArgs e)</b><br> Performs the actual drawing of the circle using the drag events to get start and end points.<br><br> <b>void newSlideButton_Click(object sender, EventArgs e)</b><br> Adds a new slide after the current slide.<br><br> <b>void duplicateSlideToolStripMenuItem_Click(object sender, EventArgs e)</b><br> Adds a new slide after the current slide that is a duplicate of the current slide<br><br> <b>void newDuplicateSlideButton_Click(object sender, EventArgs e)</b><br> Calls duplicateSlideToolStripMenuItem()<br><br> <b>void scrollBar_Scroll(object sender, ScrollEventArgs e)</b><br> Performs the actions associated with a scroll event.<br><br> <b>void copyButton_Click(object sender, EventArgs e)</b><br> See copyToolStripMenuItem().<br><br> <b>void cutButton_Click(object sender, EventArgs e)</b><br> See cutToolStripMenuItem().<br><br> <b>void pasteButton_Click(object sender, EventArgs e)</b><br> See pasteToolStripMenuItem().<br><br> <b>void rotateButton_Click(object sender, EventArgs e)</b><br> See rotateToolStripMenuItem().<br><br> <b>void fillScreenToolStripMenuItem_Click(object sender, EventArgs e)</b><br> See colorScreen().<br><br> <b>void selectModeButton_Click(object sender, EventArgs e)</b><br> Initializes "Selection Mode" to allow manipulation of ink objects.<br><br> objects.<br><br>
</DOC>
