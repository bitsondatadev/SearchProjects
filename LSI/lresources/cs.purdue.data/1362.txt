<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/cs251/ </DOCNO>
<html> <head> <title>CS25100: Data Structures and Algorithms</title> </head> <h2>CS25100: Data Structures and Algorithms, Spring 2012</h2> <p>Section 1: TTh 1:30-2:45 pm, LWSN B155, Prof. Sonia Fahmy </p> <p>Section 2: TTh 10:30-11:45 am, LWSN B155, Prof. Xavier Tricoche </p> <p><a href="./251/schedule.html">Schedule</a> &#149; <a href="./251/assignments.html">Assignments</a></p> <hr> <h3>Instructors</h3> <div> <table> <tr> <td> <a target="_top" href="http://www.cs.purdue.edu/homes/fahmy/">Sonia Fahmy</a> <br> Email: fahmy[at]cs.purdue.edu <br> Tuesdays, Thursdays 1:30-2:45 pm <br> Office: LWSN 2142H <br> Phone: (765) 494 6183<br> Office hours: Tuesdays, Thursdays 3:15-4:15 pm; <br> Wednesdays 11 am-12 noon, or by appointment<br> </td> <td> <a target="_top" href="http://www.cs.purdue.edu/homes/xmt/">Xavier Tricoche</a> <br> Email: xmt[at]cs.purdue.edu <br> Tuesdays, Thursdays 10:30-11:45 am<br> Office: LWSN 3154P <br> Phone: (765) 496 9416 <br> Office hours: Tuesdays, Thursdays 12 noon-1 pm; <br> Wednesdays 11 am-12 noon, or by appointment<br> </td> </tr> </table> </div> <h3>Teaching assistants</h3> <div> <table> <tr> <td> <a target="_top" href="http://www.cs.purdue.edu/people/graduate_students/kapoorp/">Purnima Kapoor</a> <br> Email: cs251-ta@cs.purdue.edu <br> Office: LWSN B116J<br> Office hours: M 1:30-2:30 PM<br> PSOs: M 11:30-1:20, 3:30-5:20 PM<br> </td> <td> <a target="_top" href="http://www.cs.purdue.edu/people/graduate_students/nanda1/">Rahul Nanda</a> <br> Email: cs251-ta@cs.purdue.edu <br> Office: LWSN B116E<br> Office hours: Th 3:30-4:30 PM<br> PSOs: W 3:30-5:20 PM, F 9:30-11:20 AM<br> </td> <td> <a target="_top" href="http://www.cs.purdue.edu/people/graduate_students/rtahboub/">Ruby Tahboub</a> <br> Email: cs251-ta@cs.purdue.edu <br> Office: LWSN B116B <br> Office hours: T 5:30-6:30 PM<br> PSOs: F 11:30-1:20, 3:30-5:20 PM<br> </td> </tr> </table> </div> <h3>Description</h3> <p> This course provides an introduction to the theoretical and practical aspects of data structures and algorithms. Topics will include: fundamental data structures (e.g., arrays, stacks, queues, trees, hash tables, graphs), fundamental algorithms (e.g., sorting, pattern matching, topological sorting, shortest path, minimum spanning tree), and their implementations (e.g., asymptotic and average running time analysis, pointer-based implementation of trees, and adjacency matrix implementations of graphs). </p> <h3>Prerequisites</h3> <p> CS24000: Programming in C. <h3>Text</h3> <p> R. Sedgewick and K. Wayne (2010). <i>Algorithms</i>. Addison-Wesley, 4th edition. <br> <h3>Assignments and exams</h3> <p>There will be two written homework assignments. <p> There will be six programming assignments. Programming assignments should be written in Java or C++, unless otherwise noted. Programming assignments should be submitted on lore using Turnin. Details will be provided in the assignments. <p>In general, questions about the details of homework assignments should be directed to the Blackboard discussion group for general questions, or to the TAs/instructors (via the joint email list cs251-ta@cs.purdue.edu) for questions specific to your assignment, though you should feel free to email the instructor directly. Solutions and grading criteria will be available on Blackboard when homework is returned to students. <p>There will be several in class quizzes as well as a midterm and s comprehensive final exam. Exams and quizzes will be closed book and closed notes. <!--Review sessions will be held in the class before each exam. The exam questions will focus on conceptual understanding of the key ideas from the course, including problem definitions, algorithms, and data structures.--> <h3>Grading</h3> <ul> <li>Programming and written assignments: 45% <li>Quizzes: 5% <li>Midterm exam (Wednesday March 7, 2012, 8 PM, PHYS 114): 20% <li>Final exam (during finals week, April 30 - May 4): 30% </ul> Grades will be posted on <a href="http://www.itap.purdue.edu/tlt/blackboard/">Blackboard</a>. If you think a grading error was made on an assignment or test, or if you do not receive a homework assignment or exam back, you must talk to the TA or the instructor within a week of when it was returned. <h3>Late policy</h3> Assignments are to be electronically submitted by the due date listed. Each person will be allowed <b>four</b> days of extensions which can be applied to any combination of assignments during the semester without penalty. After that a late penalty of 20% per day will be assigned. Use of a partial day will be counted as a full day. Use of extension days must be stated explicitly in the late submission (either directly in the submission header or by accompanying email to the TAs), otherwise late penalties will apply. Extensions cannot be uses after the final day of classes (i.e., April 28th). Extension days cannot be rearranged after they are applied to a submission. Use them wisely! Assignments will NOT BE accepted if they are more than five days late. Additional extensions will be granted only due to serious and documented medical or family emergencies. <h3>Academic honesty</h3> Please read the departmental <a href="http://portals.cs.purdue.edu/academic/">academic integrity policy</a>. This will be followed unless we provide written documentation of exceptions. However, we encourage you to interact amongst yourselves: you may discuss and obtain help with basic concepts covered in lectures or the textbook, homework specification (but not solution), and program implementation (but not design). However, unless otherwise noted, work turned in should reflect your own efforts and knowledge. Sharing or copying solutions is unacceptable and could result in failure. Do not copy code and then make changes (either from the Web or from other students). You are also expected to take reasonable precautions to prevent others from using your work. Be aware that we will use a software tool called <a href="http://theory.stanford.edu/~aiken/moss/">MOSS (http://theory.stanford.edu/~aiken/moss/)</a> to check for copying among submitted assignments. Additionally, the instructors and TAs will be inspecting all submitted material to ensure honesty. <i><font color="#990000">Any case of academic dishonesty will be dealt with by a severe grade penalty in the <b>overall </b>class grade and referral to the office of the Dean of Students. </font></i> <h3>Discussion group</h3> Questions/comments should be posted on the discussion forum on <A href="https://blackboard.purdue.edu/">blackboard</a>. <br> Make sure that you check the discussion group and your Purdue e-mail (we will use a course email list for important announcements) *frequently* (at least once or twice per day). Please do NOT post answers to the assignments on the discussion group, though posting general clarifications is fine. Complaints about the assignments or the class should NOT be posted to the group-- instead, they should be e-mailed to the joint TA/instructor email list cs251-ta@cs.purdue.edu <h3>Additional course policies</h3> Please read the general course policies <a href="http://spaf.cerias.purdue.edu/cpolicy.html">here</a>. <H3> Counseling </H3><P> If you are experiencing personal problems or stress, Purdue provides counseling services through the Purdue CAPS Center. See <a href="https://www.purdue.edu/CAPS/">https://www.purdue.edu/CAPS/</a> for more details. <br> <br> <hr> <h3>Course topics</h3> <p><b>Introduction and review</b> <br>Proof methods and mathematics concepts. <p><b>Program analysis</b> <br>Running time analysis of algorithms and their implementations, including asymptotic and average time analysis. <p><b>One-dimensional data structures</b> <br>Bags, stacks, queues. Abstract data types and their implementation. <p><b>Trees</b> <br>Tree data structures, including properties, implementation, and traversal. <p><b>Heaps</b> <br>Heap data structures, including properties, implementation, and construction. <p><b>Sorting algorithms</b> <br>Comparison-based sorting (e.g., merge sort) and non-comparison based (e.g., bucket sort). <p><b>Search trees</b> <br>Binary search tree data structures, including properties, implementation, and construction. <p><b>Hash tables</b> <br>Data structures, including properties and implementation, as well as performance characteristics. <p><b>Pattern matching and text processing</b> <br>Strings, Boyer-Moore algorithm, tries, Huffman's algorithm. <p><b>Graphs</b> <br>Graph data structures, including properties, implementation, and search. <p><b>Directed graphs</b> <br>Graph algorithms, including connected components, transitive closure, and topological sorting. <p><b>Weighted graphs</b> <br>Shortest path and minimum spanning tree algorithms. <p><b>Additional selected topics</b> <br>As time permits. <br> <br> </html> </html>
</DOC>
