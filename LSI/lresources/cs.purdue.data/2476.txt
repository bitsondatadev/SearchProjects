<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/ayg/CS590C/www/tcl_tk.html </DOCNO>
<HTML> <HEAD> <TITLE> Tcl/Tk Programming</TITLE> </HEAD> <BODY> <code> <br> label .label1 -text "This is a text label" <br> pack .label1 <br> <hr> <br> <br> label .label2 -text "More text" -relief sunken <br> pack .label2 <br> <hr> <br> label .label3 -text "Coloured text" -background red -foreground blue <br> pack .label3 <br> <hr> <br> <br> <br> set text "Hello there" <br> label .label4 -text $text <br> pack .label4 <br> <hr> <br> <br> #This example shows different forms for the label widget <br> label .lab1 -text "This is text" <br> label .lab2 -text "This is coloured text" -foreground red <br> -background blue <br> label .lab3 -text "Sunken text" -relief sunken <br> label .lab4 -text "Grooved text" -relief groove <br> label .lab5 -text "Flat text" -relief flat <br> label .lab6 -text "Ridged text" -relief ridge <br> label .lab7 -text "Raised text" -relief raised <br> label .lab8 -text "Times font" <br> -font *-times-medium-r-normal--*-100-* <br> pack .lab1 .lab2 .lab3 .lab4 .lab5 .lab6 .lab7 .lab8 <br> -padx 2m -pady 1m -fill x <br> <hr> <br> <br> <br> message .msg -text "When the lights turn <br> green you may proceed with caution - when the <br> lights are red you must stop - when <br> the lights turn to red you should stop, unless <br> it is dangerous to do so, and would endanger <br> following traffic - when the lights are amber, you <br> should prepare to stop, and when the <br> red and amber lights are on, you may prepare to <br> move off." <br> <br> pack .msg <br> <hr> <br> <br> <br> entry .entrybox1 -textvariable variable <br> pack .entrybox1 <br> <hr> <br> <br> <br> entry .entrybox2 -relief ridge -textvariable variable <br> pack .entrybox2 <br> <br> puts $variable <br> <hr> <br> <br> <br> <br> #Set up a listbox to show rainbow colours <br> listbox .listbox1 <br> pack .listbox1 <br> <br> #The following is an example of a widget specific command -this is <br> #the insert operation for listboxes, which inserts a list of <br> #items starting at line 0 <br> .listbox1 insert 0 red orange yellow green blue indigo violet <br> <hr> <br> <br> <br> <br> <br> text .text1 -width 45 -height 5 -relief sunken <br> pack .text1 <br> <br> #The following is another example of a widget specific command - <br> #this is the insert operation for text widgets, which <br> #inserts a list of characters starting at line 1, character 0. <br> <br> .text1 insert 1.0 " Twas brillig and the slithy toves <br> did gyre and gimble in the wabe <br> All mimsy were the borogoves <br> and the mome raths outgrabe" <br> <hr> <br> <br> <br> <br> <br> #Make a scale, oriented vertically, going down from 50 to 0. <br> #Tick marks are places alongside the scale every 10 units. <br> scale .scale1 -width 10 -orient vertical -length 280 <br> -from 50 -to 0 -command "set var1" <br> -tickinterval 10 -relief raised <br> <br> label .lab1 -width 10 -textvariable var1 -relief sunken <br> pack .scale1 .lab1 -padx 1m -pady 2m -fill x <br> <br> #Now set the value of scale to 25 using a widget command <br> .scale1 set 25 <br> <br> <br> <br> button .b -text "Press Me" -command exit <br> pack .b <br> .b configure -background Red <br> <hr> <br> <br> <br> <br> frame .frame1 -width 100 -height 100 <br> bind .frame1 <Button-1> {puts "frame1: Button 1 pressed"} <br> bind .frame1 <Button-2> {puts "frame1: Button 2 pressed"} <br> bind .frame1 <Button-3> {puts "frame1: Button 3 pressed"} <br> bind .frame1 <ButtonRelease-1> {puts "frame1: Button 1 released"} <br> bind .frame1 <Double-Button-1> <br> {puts "frame1: Double click Button 1"} <br> bind .frame1 <Any-Motion> {puts "frame1: pointer at %x,%y"} <br> pack .frame1 <br> <hr> <br> <br> <br> <br> #Set up a listbox to show rainbow colours <br> #and demonstrate selection <br> listbox .listbox2 -exportselection 1 <br> pack .listbox2 <br> <br> #The following is an example of a widget specific command -this is <br> #the insert operation for listboxes, which inserts a list of <br> #items starting at line 0 <br> .listbox2 insert 0 red orange yellow green blue indigo violet <br> <br> #There are no pre-declared bindings for the listbox <br> #Now bind a button release event on button 1 to the widget <br> #This will NOT interfere with the selection process! <br> bind .listbox2 <ButtonRelease-1> {showindices} <br> <br> #Now define procedure to show selected indices <br> proc showindices {} { <br> puts [.listbox2 curselection] <br> } <br> <hr> <br> <br> <br> button .button1 -text "Button1" -command "cmd1" <br> button .button2 -text "Button2" -command "cmd2" <br> button .button3 -text "Button3" -command "cmd3" <br> pack .button1 .button2 .button3 <br> <br> <br> button .button1 -text "Button1" -command "cmd1" <br> button .button2 -text "Button2" -command "cmd2" <br> button .button3 -text "Button3" -command "cmd3" <br> pack .button1 .button2 .button3 -side left <br> <hr> <br> <br> <br> <br> label .lab1 -text "This is label 1" <br> label .lab2 -text "This is label 2" <br> label .lab3 -text "This is label 3" <br> pack .lab1 .lab2 .lab3 <br> <hr> <br> <br> for {set i 1} {$i<=3} {incr i 1} { <br> label .lab$i -text "This is label $i" <br> pack .lab$i <br> } <br> <hr> <br> <br> <br> for {set i 1} {$i <=31} {incr i 1} { <br> button .button$i -width 20 -text "$i" -command "daydetails $i" <br> pack .button$i <br> } <br> <hr> <br> <br> <br> <br> <br> proc makecalendar {daysinmonth} { <br> for {set i 1} {$i <= $daysinmonth} {incr i 1} { <br> button .button$i -width 16 -text "$i" -command "daydetails $i" <br> pack .button$i <br> } <br> } <br> <br> makecalendar 31 <br> <hr> <br> <br> <br> <br> <br> <br> #Define 2 frames - 1 to contain the columns, and 1 to contain the <br> #Save and Quit button. <br> <br> frame .fr1 <br> frame .fr2 <br> <br> #Define two frames for the columns <br> frame .fr1.c1 <br> frame .fr1.c2 <br> <br> #define labels <br> label .fr1.c1.lab1 -text "Surname" <br> label .fr1.c1.lab2 -text "First Names" <br> label .fr1.c1.lab3 -text "Address" <br> label .fr1.c1.lab4 -text "Telephone Number" <br> label .fr1.c1.lab5 -text "Sex" <br> label .fr1.c1.lab6 -text "Age" <br> <br> #Now define the other widgets for the data <br> entry .fr1.c2.surname1 -width 30 -relief sunken -textvariable surname <br> entry .fr1.c2.firstname1 -width 30 -relief sunken <br> -textvariable firstnames <br> entry .fr1.c2.address1 -width 30 -relief sunken <br> -textvariable address <br> entry .fr1.c2.telephone -width 20 -relief sunken -textvariable telno <br> entry .fr1.c2.age1 -width 20 -relief sunken -textvariable age <br> entry .fr1.c2.sex1 -width 20 -relief sunken -textvariable sex <br> <br> #We shall defer consideration of the use of radio buttons for <br> #the next section, so we will simply allocate an entry widget for <br> #Sex for the moment. <br> <br> #Now define the buttons for saving and quitting <br> button .fr2.button1 -text "Save" -command {savecommand} <br> button .fr2.button2 -text "Quit" -command {exit} <br> <br> #Note: the command for save could be done by system <br> #dependent commands, or by TCL commands. <br> #For portability it is best to package them into a TCL procedure <br> <br> #Now pack all the widgets together - first within each frame <br> #Column 1 widgets <br> pack .fr1.c1.lab1 .fr1.c1.lab2 .fr1.c1.lab3 .fr1.c1.lab4 <br> .fr1.c1.lab5 .fr1.c1.lab6 -pady 1m <br> #Column 2 widgets <br> pack .fr1.c2.surname1 .fr1.c2.firstname1 .fr1.c2.address1 <br> .fr1.c2.telephone .fr1.c2.sex1 .fr1.c2.age1 <br> -padx 3m -pady 1m -fill x <br> #Now pack frames side by side <br> pack .fr1.c1 .fr1.c2 -side left <br> <br> #now develop the procedure for saving the data file <br> <br> proc savecommand {} { <br> #external variables have to be declared as "global" <br> global surname firstnames address telno sex age <br> set file [open /tmp/outfile w] <br> puts $file $surname <br> puts $file $firstnames <br> puts $file $address <br> puts $file $telno <br> puts $file $sex <br> puts $file $age <br> close $file <br> } <br> <br> #Note: In Unix this could have been written as <br> # proc savecommand {} { <br> # global surname firstnames address telno sex age <br> # exec echo $surname > /tmp/outfile <br> # exec echo $firstnames >> /tmp/outfile <br> # exec echo $address >> /tmp/outfile <br> # exec echo $telno >> /tmp/outfile <br> # exec echo $sex >> /tmp/outfile <br> # exec echo $age >> /tmp/outfile <br> # } <br> <br> # And finally pack the Save and Quit buttons at the bottom <br> pack .fr2.button1 .fr2.button2 -padx 2m -pady 1m -fill x <br> pack .fr1 <br> pack .fr2 -padx 2m -pady 1m -fill x <br> <br> <hr> <br> <br> <br> <br> <br> <br> radiobutton .male -width 10 -text "Male" -variable sex -value "Male" <br> radiobutton .female -width 10 -text "Female" -variable sex -value "Female" <br> <hr> <br> <br> <br> <br> <br> <br> #set gender "Female" - initialisation - if needed <br> checkbutton .sex1 -width 15 -textvariable "gender" -variable sex <br> -onvalue Male -offvalue Female <br> -command {set gender $sex} <br> <hr> <br> <br> <br> <br> <br> <br> <br> button .clear -text Clear -command {ClearData} <br> <br> <br> proc ClearData {} { <br> set firstname1 "" <br> set surname1 "" <br> set address1 "" <br> set telephone "" <br> set age1 "" <br> set sex Male <br> #or female if you prefer! <br> } <br> <br> button .load -text Load -command {LoadData} <br> <br> <br> proc LoadData {} { <br> set infile [open inputfile r] <br> gets $infile $firstname1 <br> gets $infile $surname1 <br> gets $infile $address1 <br> gets $infile $telephone <br> gets $infile $age1 <br> gets $infile $sex <br> } <br> <hr> <br> <br> <br> <br> <br> <br> <br> <br> .listbox1 yview 3 <br> .listbox1 yview 10 <br> .listbox1 yview 20 <br> .listbox1 yview 1 <br> .listbox1 yview end <br> <hr> <br> <br> <br> <br> <br> #Set up a listbox to show European cities <br> listbox .listbox2 <br> #The following is an example of a widget specific command -this is <br> #the insert operation for listboxes, which inserts a list of <br> #items starting at line 0 <br> .listbox2 insert 0 Aberdeen Alicante Athens Basel Berne <br> Bilbao Cannes Edinburgh Glasgow Geneva <br> Lisbon London Madrid <br> Munich Paris Rome <br> Rouen Venice Zurich <br> #The only way this can be scrolled at present is by <br> #using Button 2 to grab the text. Now we'll try to attach <br> #some buttons to control it. <br> #Set up a new frame with two buttons <br> frame .fr -relief raised <br> button .fr.button1 -text "UP" -command {.listbox2 yview 1} <br> button .fr.button2 -text "DOWN" -command {.listbox2 yview 10} <br> #The buttons are associated with listbox commands to move the <br> #data which is in view. <br> #Now pack everything together <br> pack .listbox2 .fr -side left -padx 1m -fill x <br> pack .fr.button1 .fr.button2 -padx 1m -pady 2m -fill x -fill y <br> <hr> <br> <br> <br> <br> <br> #First make a menu button <br> menubutton .menu1 -text "Unix commands" -menu .menu1.m <br> -underline 0 <br> <br> #Now make the menu, and add the lines one at a time <br> menu .menu1.m <br> .menu1.m add command -label "List Files" -command {ls} <br> .menu1.m add command -label "Get date" -command {date} <br> .menu1.m add command -label "Start calendar" -command {xcalendar} <br> <br> pack .menu1 <br> <br> </code> <br> <br> <br> </body> </body>
</DOC>
