<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/ci/cs502/index.html </DOCNO>
<DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> <html> <head> <title></title> <title>CS 502 Web Server</title> </head> <body style="background-color: rgb(255, 255, 255);"> <center> <h1>CS 502: Compiling and Programming Systems </h1> <h2>Fall 2011</h2> </center> <br></br> <hr> </hr> <p><big><strong> <font color="#0000ff"> Instructor </font> </strong></big>: Professor Zhiyuan Li </p> <span style="color: rgb(51, 51, 255);"><span style="font-weight: bold; font-family: times new roman,times,serif;">Lecture Schedule</span>:&nbsp;</span> <!--TTh 3:00-4:15pm Aug 25 - Dec 14, 2008 LWSN 1106. <a href="http://www.courses.purdue.edu/cgi-bin/relay.exe/query?qid=courseOfferingDetails&abbreviation=C+S&academicInitiative=puWestLafayetteTrdtn&session=2008Fal&courseNumber=502"> Refer to School Update </a><br> --> <br></br> <big><span style="color: rgb(51, 51, 255); font-weight: bold;">Home page of the course:&nbsp; <br></br> <span style="color: rgb(51, 0, 51);"> In addition to this public web page, students will access course materials (course policies, lecture notes, grades, assignments, etc) through&nbsp;&nbsp; <a href="http://www.itap.purdue.edu/tlt/blackboard/">Purdue's WebCT</a></span></span></big><br></br> <h3> <font color="#0000ff"> What Does This Course Cover?</font></h3> We will first give a quick coverage of the basic structure in compilers and basic theories and techniques used for compiler construction, namely <ul> <li> Lexical analysis </li> <li> Examples of context free grammars </li> <li> Syntax analysis </li> <ul> <li> top-down parsing </li> <li> bottom-up parsing </li> </ul> <li> Abstract syntax tree </li> <li> Basic type checking </li> <li> Symbol tables </li> <li> intermediate code format and generation </li> <li> machine code generation </li> </ul> We will have the first programming project aimed at practicing the use of the Lex and Yacc tools to build a lexical analyzer and a parser. <br></br> <strong> The second half of the course </strong> gives more in depth coverage of the fundamental program analysis techniques commonly used by compilers and software engineering tools, which include, but not limited to, the following: <ul> <li> Control flow and control dependence </li> <li> Data flow and data dependence analysis </li> <li> Interprocedural analysis </li> <li> Pointer analysis </li> </ul> Attempt will be made to give students a sense of the state of the art concerning program analysis. The second programming project will be designed to give students an opportunity to practice such analysis techniques. <br><br> Examples will be presented to illustrate the use of such analysis algorithms for code improvement. Most of such examples are related to "optimization options" offered by production compilers. The discussion will put more emphasis on breadth coverage than depth, with the main objective being that students be able to understand the impact of enabling such options. <br><br> <H2> Breadth versus Depth </H2> We will try to balance breadth against depth. Since students will come from various background and research interests, a main emphasis will be on covering wide enough scope to give them a general idea of this subject. The core concepts, such as control and data flow analysis, parallelism and data locality, will be given treatment with considerable depth. It should also be emphasized that, in such a graduate-level course, students should not expect a set of recipes fed to them. Instead, everyone is expected to be actively engaged in grasping the concepts behind the discussed techniques and the relationship between various methods. <H2> <font color="0000ff"> Exams </font> </H2> We will have two midterms in class and a final exam (dates and places to be determined by the university). Written assignments will, to a certain degree, reflect the style of the exam questions. Students therefore are strongly advised to complete them with due diligence. <H2><font color="0000ff"> Academic Integrity </font> </H2> <strong> Discussions among the students on the course subject and project designs are strongly encouraged. However, all written and programming assignments must be completed independently. Copying from one another is strictly prohibited. Individuals who break this rule (both those copying and those providing the work to copy) will receive zero point for the particular assignment or for the entire course, depending on the severity of the offense. </strong> <H2> <font color="#0000ff"> Textbook </font> </H2> The following book is our required text: <br> </br> Compilers: Principles, Techniques, and Tools (Second Edition) <br> A Aho & M. Lam & Sethi & Ullman <br> Addison-Wesley <br> 978-032-148681-3 <br></br> Articles from the compiler literature may be introduced to augment the required textbook. <h3><font color="#0000ff"> Grading of CS502 </font> </h3> <ul> <li> Midterm 1 10% </li> <li> Midterm 2 10% </li> <li> Final exam 30% </li> <li> Programming projects 20% </li> <li> Written homeworks 30% </li> </ul> <h3><font color="#0000ff"> Grades Dispute </font> </h3> If anyone finds the grading of a piece of course work to be questionable, the issue must be brought to the attention of the TAs as soon as possible through email, i.e. within the first week from the day the graded work is returned to the student. This will ensure that the graders still have clear memory of the entire context in which the grade was assigned. <h2> The Ph.D. Qualifying Exam </h2> Students who wish to take the Compiler qualifying exam must inform the department office by a certain deadline (to be announced by the department). <br></br> The final exam will be comprehensive, and will be used as the qualifying exam. The exam will be open book and open notes. <br></br> Since the final exam constitutes only a part% of the course work, it is possible that a student may get a A grade for the course but fails the qualifying exam or, reversely, may pass the qualifying exam but receives a below-A grade for the course. <hr> </hr> </body> </html> </html>
</DOC>
