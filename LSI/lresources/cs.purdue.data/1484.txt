<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/apm/listen.html </DOCNO>
<html> <head> <meta http-equiv="content-type" content="text/html;charset=iso-8859-1"> <meta name="generator" content="Adobe GoLive 4"> <title>Project Listen [for program sonification]</title> <style type="text/css"> <!-- .red { color: #F66; } --> </style> </head> <body bgcolor="white"> <h1><font color="#8b0000">Project Listen/JListen</font></h1> <h2>Program and <span class="red">Data</span> Auralization (Sonification) project</h2> <p>[The project is once again active! Yeah!]</p> <p>Principal Investigator: <a href="http://www.cs.purdue.edu/homes/apm/mathur-homepage.html" target="_top">Aditya P. Mathur</a><br> <font size="2" color="#009900"><i>Latest update:December 4, 2011</i></font></p> <font size="-1" color="maroon"><a title="Progress of the Listen Project" href="http://www.cs.purdue.edu/homes/apm/listen/progress.pdf" target="_top">Project History</a></font> <font size="-1" color="maroon">(Last Revision August 25, 2011 (pdf)</font>) <p>Current Graduate Students:&nbsp; None. </p> <p>Current Undergraduate Students: Shawn Hsu and Jiangnan Shanggun [Starts Spring 2012]<br> <br> <font size="-1">Download <a title="JListen code" href="listen/JListen-1.0-BITS.zip" target="_top"><br> JListen 1.0<br> </a><a href="listen/JListen-source1.2.zip">JListen1.2<br> </a></font><a href="http://www.cs.purdue.edu/homes/apm/JListenUserManual.pdf">JListen User manual [pdf]</a> </p> <h2><font color="maroon">Introduction</font></h2> <p>As the importance of multimedia grows, we envisage increasing use of sound as an output medium. Examples of use of sound are virtual reality systems, simulations, video games, education for the visually-handicapped computer users and data analysis systems. In most of these applications sound is emitted during the execution of an application when an event occurs or during an activity. Addition of sound to such an application requires (a) identification of locations in the code that are centers of such events or activities and (b) adding suitable code responsible for emitting sound. The effectiveness of sound as a medium in an application depends, amongst other factors, on how well (a) and (b) are performed.</p> <p>The Listen/JListen systems have been designed to help in performing these tasks in a friendly environment on a PC, Mac, or a workstation. The current version of Listen can be used for auralizing C programs on Sun workstations. We used&nbsp; Listen to conduct experiments in understanding program behavior, testing and debugging, classroom teaching, and development of software for the blind.</p> <p><font color="#8b0000"><i>The Jlisten Project</i></font>: The JListen project grew out of the Listen project. The Listen Specification Language (LSL) has been adapted to Java. LSL/Java allows the specification of aspects of a Java program to be auralized. A specification written in LSL/Java is processed by the LSL/Java parser and input to the JListen parser. JListen inputs a Java program P that is to be auralized and the processed LSL/Java specifications. It then generates an instrumented version of P. The instrumented P is compiled using a traditional Java compiler. During its execution P is connected to a<i> Media Manager. </i>Execution of specific aspects of P causes messages to be sent to the <i>Media Manager</i> that in turn sends appropriate commands to an audio system allowing the generation of sounds. The <i>Media Manager </i>allows run-time control of sounds.</p> <p>R. Jagadish Prasath and M. C. Gopinath, both graduate students at BITS, Pilani, completed two excellent MS theses on the use of auralization in testing for security. Scroll down this page to download copies of their theses. <i>Please make appropriate citations to their thesis if your work is a follow-on to theirs...Thanks.</i></p> <p>JListen is once again undergoing significant changes. Shawn is working on addining dynamic and static data sonification to JListen. Static sonification is what NASA's xSonify does by requiring the data to be sobified to be available prior to sonification. Dynamic sonification is done on data while it is being generated. In the case of JListen we assume that data is being generated inside a Java program. The data so generated is sonified. We expect dynamic sonification to be useful in rapid identification of trends in large scale simulations that take place in a variety of areas such as fluid dynamics, neural simulations, weather simulations, etc.</p> <h2><font color="maroon">Audio Samples</font></h2> <ul> <li>Hear a sample <a href="http://www.cs.purdue.edu/homes/apm/listen/bubble.au" target="navigator" title="The Sound of Bubble Sort ">Bubble Sort</a><a href="http://www.cs.purdue.edu/homes/vk/bubble.au"> </a>. <li>Hear a sample <a href="http://www.cs.purdue.edu/homes/apm/listen/selection.au" target="navigator" title="The Sounds of Selection Sort">Selection Sort</a><a href="http://www.cs.purdue.edu/homes/vk/selection.au"> </a>. <li>View the <a title="Listen System" href="http://www.cs.purdue.edu/homes/apm/listen/sort.lsl" target="_parent">LSL/C specification</a> (plain text file) corresponding to the above Bubble and Selection sorts. </ul> <p><i>The above audio files were generated using Listen 1.0 and MIDI equipment. We used Roland's Sound Canvas SC 55 for synthetic sounds. JListen audio samples are yet to be recorded and placed on this site.</i></p> <h2><font color="#993300">Publications</font></h2> <ul> <h2> <li><font size="3" color="#993300"><i>Master's Theses</i></font> </h2> <ul> <h2> <li><a href="http://www.cs.purdue.edu/homes/apm/listen/boardman-thesis.pdf"><font size="2">&quot;LISTEN: An Environment for Program Auralization&quot;: Dave Boardma, s MS thesis, Purdue University, USA. (August 1994, 171 pages) (pdf)</font></a> </h2> <h2> <li><a href="http://www.cs.purdue.edu/homes/apm/listen/vivek-thesis.pdf" title="On Program Auralization: Vivek Khandelwal's MS thesis"><font size="2">&quot;ON Program Auralization&quot;: Vivek Khandelwal, MS Thesis, Purdue University, USA. (May 1995, 166 pages) (pdf)</font></a> </h2> <h2> <li><font size="2"><a title="Auralization of an intrusion detection system" href="listen/JListen-1.0-BITS/Gopinath/MS-thesis/thesis-final.doc">&quot;Auralization of an intrusion detection syste&quot;: M. C. Gopinath, BITS, Pilani, India. May 2004 (doc file of MS thesis, 81 pages)</a></font> </h2> <h2> <li><font size="2"><a title="Auralization of an intrusion detection system" href="listen/JListen-1.0-BITS/jagdish/MS-thesis/thesis-final.doc">&quot;Auralization of Web server using JList&quot;: . R. Jagadish Prasath, BITS, Pilani, India. May 2004 (doc file of MS thesis, 90 pages)</a></font> </h2> </ul> <h2> <li><font size="3" color="#993300"><i>Refereed and other Publications </i></font> </h2> <ul> <h2> <li><a href="http://www.cs.purdue.edu/homes/apm/listen/TR143P.pdf" target="navigator" title="Technical Report"><font size="2">Preliminary Report on Design Rationale, Syntax, and Semantics of LSL: A Specification Language for Program Auralization. </font></a><font size="2">David B. Boardman and Aditya P. Mathur, September 1993, pp 51. (</font><font size="2" color="maroon">pdf version</font><font size="2">)</font> </h2> <h2> <li><a href="http://www.cs.purdue.edu/homes/apm/listen/listen-report" target="navigator" title="Technical Report: LaTeX files"><font size="2">Preliminary Report on Design Rationale, Syntax, and Semantics of LSL: A Specification Language for Program Auralization. </font></a><font size="2">David B. Boardman and Aditya P. Mathur, September 1993, pp 51. (</font><font size="2" color="maroon">Original LaTeX and related files in a directory</font><font size="2">)</font> </h2> <h2> <li><a href="http://www.cs.purdue.edu/homes/apm/listen/program-auralization.ps" target="navigator" title="Technical Report"><font size="2">LSL Programming Language (ps)</font></a> </h2> <h2><font size="1">D.Boardman, V.Khandelwal, and A. P. Mathur. LSL: A Specification Language for Program Auralization, <i>Proceedings of International Conference on Auditory Display</i>, ICAD~94, November 7-9, 1994, Santa Fe, NM, pp 257-264.</font></h2> <h2> <li><a href="http://www.cs.purdue.edu/homes/apm/listen/brazil-compose.pdf"><font size="2">Music Composition and program behavior (pdf)</font></a> </h2> <h2><font size="1">A. P. Mathur. Using computer programs as generators of compositions, <i>Proceedings of the IV Simposio Brasiliero de Computacio e Musica</i>, Brasilia, DF 3-7 August 1997, pp 31-41.</font></h2> <h2> <li><a href="http://www.cs.purdue.edu/homes/apm/listen/prog-env.pdf" target="navigator"><font size="2">LISTEN system (pdf)</font></a> </h2> <h2><font size="1">D. Boardman, G. Greene, and V. Khandelwal, and A. P. Mathur. LISTEN: A Tool to Investigate the Use of Sound for the Analysis of Program Behavior, <i>Proceedings of the Nineteenth Annual International Computer Software &amp; Applications Conference (COMPSAC'95)</i>, IEEE Computer Society Press, August~9-11, 1995, Dallas, Texas, pp 184-193. </font></h2> <h2> <li><a href="http://www.cs.purdue.edu/homes/apm/listen/ugsymp_presentation.ppt" title="Ed Gilmore's presentation"><font size="2">Ed Gilmore and Bryan Strait's Listen/Java presentation on October 25, 2002 at Argonne national labs (ppt slides). </font></a> </h2> </ul> </ul> <h2><font color="maroon">Code</font></h2> <ul> <li><a href="http://www.cs.purdue.edu/homes/apm/courses/BITSC461-fall03/listen-code/listen-1.0-dave"><font size="-1">Listen/C 1.0 Code</font></a> <li><a href="http://www.cs.purdue.edu/homes/apm/courses/BITSC461-fall03/listen-code/listen-2.0-vivek"><font size="-1">Listen/C 2.0 Code </font></a> <li><font size="-1">Listen/C 3.0: Contact <a href="mailto:apm@purdue.edu" target="navigator">Aditya P. Mathur.</a></font> <li><a title="JListen code" href="listen/JListen-1.0-BITS/JListen.htm" target="_top"><font size="-1"><a title="JListen code" href="listen/JListen-1.0-BITS.zip" target="_top">JListen 1.0<br> </a><font size="-1"><a href="listen/JListen-source1.2.zip">JListen1.2</a></font> </ul> Kindly send email to apm@purdue.edu when you download any code from this site. Thank you. <p><font size="5" color="#993300"><b>Contributors</b></font></p> <ul> <li>David Boardman (Independent Consultant): <ul> <li><i><font color="#cc0000">Graduate student, the first one to work on Listen; developed Listen/C 1.0 single handedly. Modified the LSL language developed originally by Mathur. Also advised three undergraduate students to improve Listen/C 1.0. Continues to contribute to the Listen project. </font></i> </ul> <li>Vivek Khandelwal (Nortel): <ul> <li><i><font color="#cc0000">Graduate student, added features to Listen 1.0; conducted experiments with mutation testing and sounds.</font></i> </ul> <li>Howard Chen: <ul> <li><i><font color="#cc0000">Undergraduate student, added features to Listen 2.0.</font></i> </ul> <li><font color="black">Ed Gilmore (Purdue): </font> <ul> <li><i><font color="#cc0000">Undergraduate student, Listen/Java grammar, LSL parser, and overall project oversight. [Fall 2002]</font></i> </ul> <li><font color="black">Chris Kanich (Purdue): </font> <ul> <li><i><font color="#cc0000">Undergraduate student, Listen/Java GUI.</font></i> </ul> <li>Bob Liu: <ul> <li><i><font color="#cc0000">Undergraduate student, added features to Listen 2.0.</font></i> </ul> <li>Jack Lowry: <ul> <li><i><font color="#cc0000">Undergraduate student, added features to Listen 2.0.</font></i> </ul> <li>Geoff Greene: <ul> <li><i><font color="#cc0000">Undergraduate student, added GUI to Listen/C 2.0.</font></i> </ul> <li>Nate Nystrom (Cornell): <ul> <li><i><font color="#cc0000">Undergraduate student, designed/implemented a general purpose Listen server.</font></i> </ul> <li><font color="black">Bryan Strait (Purdue):</font> <ul> <li><i><font color="#cc0000">Undergraduate student, Listen/Java instrumenter. [Fall 2002]</font></i> </ul> <li>Cary Supalo: <ul> <li><i><font color="#cc0000">Undergraduate student, assisted with experiments using Listen 2.0.</font></i> </ul> <li>Eric Wiegman (Tellabs): <ul> <li><i><font color="#cc0000">Undergraduate student, developed the &quot;say&quot; command for use with Listen/2.9.</font></i> </ul> <li>S. A. Ashok, Chris Kanich (Purdue), K. R. Jayaram, K E Dorai, Khemraj Sharma, Meenali Rungta, Prashanth Ganesh, Sanjay Kulhari, Shubra Pradeep, Sundaresan R, Vaibhav Ranjan <ul> <li><i><font color="#cc0000">Undergraduate students, developed portions of JListen 1.0 during the Fall of 2003 at Purdue University and BITS, Pilani, India.</font></i> </ul> <li>R. Jagdish Prasath: <ul> <li><i><font color="#cc0000">Graduate student at BITS, Pilani, developed JListen 1.2 with Gopinath during the Spring of 2004.</font></i> </ul> <li>M. C. Gopinath: <ul> <li><i><font color="#cc0000">Graduate student at BITS, Pilani, developed JListen 1.2 with Jagdish during the Spring of 2004.</font></i> </ul> <li>Jack Saalweachter <ul> <li><i><font color="#bb0000">Undergraduate student, Computer Science, Purdue University. Worked to instrument thread-related events in Java programs. Plans to study the usefulness of auralization in debugging thread-related errors. [Spring 2006]</font></i> </ul> <li>John Valko <ul> <li><i><font color="#bb0000">Undergraduate student, Computer Science, Purdue University. Used JListen to create innovative musical compositions. [Spring 2006] So far no significant output generated.</font></i> </ul> <li>Shawn Hsu </li> <ul> <li><i><font color="#bb0000">Undergraduate student, Computer Science, Purdue University. Implemneting (Fall 2011) dynamic information (raw and anlyzed data) sonification</font></i> </li> </ul> </ul> <p><font size="5" color="#993300"><b>Similar Projects</b></font></p> <ul> <li>Roberto Mannai. <a href="http://www.codesounding.org/indexeng.html">Codesounding</a> <li><a href="http://spdf.gsfc.nasa.gov/research/sonification/sonification_software.html">xSonify, NASA </a> [Thanks to Roberto for the pointer.] <li><a href="http://en.wikipedia.org/wiki/Sonification">Sonification (Wikipedia) </a> <li>Composition: <a href="http://www.miller-mccune.com/culture-society/triumph-of-the-cyborg-composer-8507/">David Cope</a> <li>Data sonification using <a href="http://sonify.psych.gatech.edu/research/sonification_sandbox/index.html">Sonification Sandbox</a> <li>Data sonification using <a href="http://spdf.gsfc.nasa.gov/research/sonification/sonification.html">xSonify</a> <li><a href="http://www.icad.org/websiteV2.0/Conferences/ICAD96/proc96/lodha.htm">Data sonification (another Listen project) </a> <li><a href="http://en.wikipedia.org/wiki/Sonification#External_links">Wikipedia page</a> <li><a href="http://fivedots.coe.psu.ac.th/~ad/jg/javaArt5/index.html">Sonification book chapter by Andrew Davison</a> <li><a href="http://www.computer.org/portal/web/csdl/doi/10.1109/ICPC.2006.47">Program comprehension using sonification </a> [Berman et al., 2006] <li><a href="http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5090035&tag=1">Program comprehension using sonification</a> [K Hussain, et al., 2009]<br> </ul> <p></p> <p></p> <hr size="8" width="33%"> </body> </html> </html>
</DOC>
