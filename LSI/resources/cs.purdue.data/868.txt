<DOC>
<DOCNO> http://www.cs.purdue.edu/academic_programs/courses/canonical_syllabi/cs250.shtml </DOCNO>
<HTML> <HEAD><TITLE>CS 250: Computer Architecture</TITLE></HEAD> <body text="#000000" link="#B1946C" vlink="#6F6F6F" alink="#818501" bgcolor="#FFFFFF" topmargin="1"> <table border="0" cellspacing="0" cellpadding="0" width="640"> <tr> <td><a target="_top" href="http://www.cs.purdue.edu/"><img src="/images/lib/headings/subpagetitle.jpg" alt="Department of Computer Sciences @ Purdue University" align="left" hspace="0" vspace="0" border= "0" /></a><br clear="all" /> <a target="_top" href="http://www.cs.purdue.edu/search/"><img src="/images/lib/nav/search.jpg" alt= "Search" align="left" hspace="0" vspace="0" border="0" /></a> <img src="/images/lib/nav/div.jpg" alt="|" align="left" hspace="0" vspace="0" /> <a target="_top" href= "http://www.cs.purdue.edu/resources/"><img src="/images/lib/nav/general_information.jpg" alt="General Information" align="left" hspace="0" vspace="0" border="0" /></a> <img src= "/images/lib/nav/div.jpg" alt="|" align="left" hspace="0" vspace="0" /> <a target="_top" href= "http://www.cs.purdue.edu/academic_programs/"><img src="/images/lib/nav/academics.jpg" alt="Academics" align="left" hspace="0" vspace="0" border="0" /></a> <img src="/images/lib/nav/div.jpg" alt="|" align= "left" hspace="0" vspace="0" /> <a target="_top" href="http://www.cs.purdue.edu/research/"><img src= "/images/lib/nav/research.jpg" alt="Research" align="left" hspace="0" vspace="0" border="0" /></a> <img src="/images/lib/nav/div.jpg" alt="|" align="left" hspace="0" vspace="0" /> <a target="_top" href= "http://www.cs.purdue.edu/directory/"><img src="/images/lib/nav/people.jpg" alt="People" align="left" hspace="0" vspace="0" border="0" /></a> <img src="/images/lib/nav/div.jpg" alt="|" align="left" hspace= "0" vspace="0" /> <a target="_top" href="http://www.cs.purdue.edu/external_relations/"><img src= "/images/lib/nav/external_relations.jpg" alt="External Relations" align="left" hspace="0" vspace="0" border="0" /></a></td> </tr> </table> <p></p> <TABLE WIDTH="600"> <TR><TD ALIGN="CENTER"> <FONT FACE="Arial,Helvetica" SIZE="+3"> <B>CS 250: Computer Architecture</B> </FONT> </TD></TR> </TABLE><P> <TABLE WIDTH="700"> <TR><TD> <FONT FACE="Arial,Helvetica"> <!-- Number: CS 250<BR> Title: Computer Architecture<BR> Prerequisite(s): CS 181<BR> Co-requisite(s):<BR> Class Hours: 3<BR> Lab Hours: 2<BR> Credit Hours: 4<P> Catalog Description: Concepts of computer system organization and programming; instruction and data representations; basics of digital logic design; instruction set decoding and addressing modes; fundamentals of assembly language; the organization and the operation of the central processing unit, memory system, and I/O interfaces. I/O structures; direct memory access; interrupts; bus protocols. --> List of Topics (By Week):<P> 1. The basic organization of a computer system and a processor.<BR> Boolean algebra. combinational logic circuits.<BR> State elements: the R-S latch.<BR> Lab: Review of basic UNIX commands and utilities.<P> 2. State Elements (Cont'd): D-latch, D-flipflops.<BR> The register file, multiplexors, decoders.<BR> Lab: Review of basic C programming language features.<P> 3. The instruction set: Operations and operands.<BR> Introduction to assembly programming.<BR> Simple ALU operations and branch instructions.<BR> Lab: Bit-wise logic operations and standard library routines in C. Source level C program debugging.<P> 4. Addressing modes. Memory allocation and stack mechanism in assembly programs.<BR> Lab: Compiling C programs into assembly programs.<P> 5. Procedure calls in assembly programs.<BR> Register usage convention.<BR> Assemblers, linkers, debuggers.<BR> Lab: Assembling, disassembling, linking. An emulator and a debugger for executing and debugging assembly programs.<P> 6. Number representations and ALU operations.<BR> Floating point instructions.<BR> Lab: Writing assembly programs with simple control structures.<P> 7. The processor data-path and control.<BR> Design of a primitive processor with hard-wired control.<BR> Instruction execution steps.<BR> Lab: Writing assembly programs dealing with radix and floating point numbers.<P> 8. Finite state machines. PLA vs. ROM.<BR> The basics of microprogramming.<BR> Lab: Writing assembly programs with recursive procedure calls.<P> 9. Relationship between concepts covered so far.<BR> Lab: Review and comprehensive exercises.<P> 10. SRAM and DRAM. Caches.<BR> Lab: Reducing memory reference penalty in assembly programs by efficient use of registers, caches and other techniques.<P> 11. Virtual memory, page faults, TLB.<BR> Lab: Memory allocation in assembly programs. Measuring and understanding page faults generated by a program.<P> 12. Exception and interrupt handling.<BR> Lab: Exception handlers. Long jumps.<P> 13. I/O. Bus. I/O and network interface.<BR> Lab: I/O routines.<P> 14. A high-level view of instruction Pipelining and other Performance Issues.<BR> Lab: Measuring and understanding program performance.<P> 15. Review and prepare for exam.<BR> Lab: Review and finish up.<P> <!-- Suggested Textbook(s):<P> Computer Organization (Fourth Edition) by V. Carl Hamacher (Queen's University, Canada), Z. G. Vranesic (University of Toronto), S. G. Zaky (University of Toronto), McGraw-Hill --> 2001.08 </FONT> </TR></TD> </TABLE> </BODY> </HTML> </HTML>
</DOC>
