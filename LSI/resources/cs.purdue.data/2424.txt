<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/ayg/CS251/sample_midterm.html </DOCNO>
<html> <head> <title>Data Structures Sample Midterm</title> </head> <body bgcolor="#FFFFFF"> <font align = left face = helvetica> <h1>Data Structures Sample Midterm</h1> <br> <br> <br> NOTE: Unless otherwise indicated, all logarithms are in base 2. <ul> <li> Select the tightest big-Oh notation for the following expressions: <pre> i) 4 + 8 + 12 + 16 + ..... + 4n ii) 1 + 2 + 4 + 8 + 16 + ..... + n iii) n*(1 + 2 + 3 + ..... + n) iv) log (n^2) + (log n)^2 v) n + 2^(2*log(n)) </pre> <li> Show the following: <pre> i) n! = O(n^n) ii) 1^2 + 2^2 + 3^2 + ..... + n^2 = Theta (n^3) iii) n / (sqrt(n) + 1) = O(n) iv) sqrt(n) + log(n) = Omega(sqrt(n)) </pre> <li> Using mathematical induction, show that: <pre> 1^2 + 2^2 + 3^2 + ..... + n^2 = n(n+1)(2n+1)/6 </pre> <li> Analyze the complexity (in big-Oh terms) of the following selection-sort routine. The routine picks out the largest element in the current list and exchanges it with the last element. It continues until the list has only one element: <pre> for (i = n-1; i > 0; i--) { MaxPosition = i; for (j = 0; j < i; j++) { if (a[j] > a[MaxPosition]) MaxPosition = j; } exchange(i, MaxPosition); } </pre> <li> a) Give a Theta(n) algorithm for computing a^n, given a and n. <br> <br> b) Give a Theta(log n) algorithm for computing a^n, given that n is a power of 2. <br> <br> <li> You are given a data structure stack with the following ADT: <pre> push(element) pop() size() </pre> Each of these operations runs in O(1) time. Use pseudocode to implement the following Queue ADT using the stack ADT only. What is the complexity of each of your methods? <pre> enqueue(element) dequeue() size() </pre> Note: you do not have to implement a linked list or an array. Instead, you must use only the three methods in the stack ADT. <br> <br> Hint: Use multiple stacks. <br> <br> <li> Insertion into Ranked Sequences implemented as arrays take O(n) time and location in positional sequences using linked lists taks O(n) time. Describe an implementation using a linked list of fixed size arrays that reduces this time. Assume that each node in the linked list contains a count of the number of elements in array of the node. If an element must be inserted between two nodes whose arrays are filled, a new node is created in between and the element is inserted into the node. Note that there may be partially filled arrays in the list. If the array in each linked list node is capable of carrying 10 elements, what is the runtime of this data structure for location and insertion (do not ignore any constants). Write pseudocode for location and insertion. (While computing complexities, assume that all nodes in the linked list are full.) </ul> </body></html> </body></html>
</DOC>
