<DOC>
<DOCNO> http://www.cs.purdue.edu/gsb/_export/xhtml/survival_guide:curriculum </DOCNO>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> <title>survival_guide:curriculum</title> <meta name="generator" content="DokuWiki Release 2007-06-26b" /> <meta name="robots" content="index,follow" /> <meta name="date" content="2007-07-30T00:40:14-0400" /> <meta name="keywords" content="survival_guide,curriculum" /> <link rel="search" type="application/opensearchdescription+xml" href="/gsb/lib/exe/opensearch.php" title="Graduate Student Board" /> <link rel="start" href="/gsb/" /> <link rel="contents" href="/gsb/survival_guide:curriculum?do=index" title="Index" /> <link rel="alternate" type="application/rss+xml" title="Recent Changes" href="/gsb/feed.php" /> <link rel="alternate" type="application/rss+xml" title="Current Namespace" href="/gsb/feed.php?mode=list&amp;ns=survival_guide" /> <link rel="alternate" type="text/html" title="Plain HTML" href="/gsb/_export/xhtml/survival_guide:curriculum" /> <link rel="alternate" type="text/plain" title="Wiki Markup" href="/gsb/_export/raw/survival_guide:curriculum" /> <link rel="stylesheet" media="all" type="text/css" href="/gsb/lib/exe/css.php?s=all" /> <link rel="stylesheet" media="screen" type="text/css" href="/gsb/lib/exe/css.php" /> <link rel="stylesheet" media="print" type="text/css" href="/gsb/lib/exe/css.php?s=print" /> <script type="text/javascript" charset="utf-8" src="/gsb/lib/exe/js.php?edit=0&amp;write=0" ></script> </head> <body> <div class="dokuwiki export"> <div class="toc"> <div class="tocheader toctoggle" id="toc__header">Table of Contents</div> <div id="toc__inside"> <ul class="toc"> <li class="level1"><div class="li"><span class="li"><a href="#courses" class="toc">Courses</a></span></div> <ul class="toc"> <li class="level2"><div class="li"><span class="li"><a href="#what_should_i_take" class="toc">What Should I Take?</a></span></div></li> <li class="level2"><div class="li"><span class="li"><a href="#course_descriptions" class="toc">Course Descriptions</a></span></div></li> </ul> </li> <li class="level1"><div class="li"><span class="li"><a href="#registering" class="toc">Registering</a></span></div></li> <li class="level1"><div class="li"><span class="li"><a href="#ph.d" class="toc">Ph.D.</a></span></div> <ul class="toc"> <li class="level2"><div class="li"><span class="li"><a href="#core_courses" class="toc">Core Courses</a></span></div></li> <li class="level2"><div class="li"><span class="li"><a href="#qualifiers" class="toc">Qualifiers</a></span></div></li> <li class="level2"><div class="li"><span class="li"><a href="#advisor_and_plan_of_study" class="toc">Advisor and Plan of Study</a></span></div></li> <li class="level2"><div class="li"><span class="li"><a href="#thesis" class="toc">Thesis</a></span></div></li></ul> </li></ul> </div> </div> <h1><a name="courses" id="courses">Courses</a></h1> <div class="level1"> </div> <!-- SECTION "Courses" [1-22] --> <h2><a name="what_should_i_take" id="what_should_i_take">What Should I Take?</a></h2> <div class="level2"> <p> First, look at the list of courses being offered on the CS Department web site, <a href="http://www.cs.purdue.edu/academic_programs/courses/" class="urlextern" title="http://www.cs.purdue.edu/academic_programs/courses/" rel="nofollow">http://www.cs.purdue.edu/academic_programs/courses/</a>. If you are a first-year masters students, you will face many choices of classes. The choices for a first-year Ph.D. student are somewhat restricted. Talk to second or third year graduate students. The best place to get information about a course and a professor is from someone who has taken the course, and not neccessarily your advisor or professors in the department. This is probably the most important step in the registration process. </p> <p> Most people find it best to select courses so that their workload is balanced among various types of work: reading, programming, theory, mathematics (calculus, real analysis, linear algebra), etc. Taking two heavy programming courses together is a lot of work, three can be suicidal. </p> <p> There is also the number of course hours to consider. Typical and maximum course loads are shown below. Keep in mind that what is said to be “typical” below may be a lighter or heavier load than what is right for you. If you are a masters candidate, how much of a rush you are in to complete your degree will also be a factor. Taking the maximum number of credit hours in your first semester, however, is probably a recipe for disaster. </p> <ul> <li class="level1"><div class="li"> fellowship or self-supported 9 - 12 hours typical, 18 hours maximum </div> </li> <li class="level1"><div class="li"> quarter-time assistantship 6 - 12 hours typical, 15 hours maximum </div> </li> <li class="level1"><div class="li"> half-time assistantship (most TAs) 6 - 9 hours typical, 12 hours maximum </div> </li> <li class="level1"><div class="li"> half-time research assistantship (most RAs) less than 18 hours, at least 6 hours thesis work </div> </li> <li class="level1"><div class="li"> full-time research assistantship less than 18 hours, at least 12 hours thesis work </div> </li> </ul> <p> A graduate student is classified as a full-time student if he or she is registered for 6 credit hours when funded by an assistantship or 9 credit hours when funded by a fellowship. Masters students need (eventually) to complete 10 three-credit courses, or 8 three-credit courses with a thesis, for their degrees. One of CS 502 or CS 565, one of CS 503 or CS 536, and one of CS 580 or CS 584 are required; the others are chosen by the student. You should get an idea of the courses you might like to take now, but don&#039;t bother trying to work out a schedule more than a semester in advance&ndash;the actual scheduling of courses (regardless of what the course descriptions say) is quite variable. There are also “topics” courses that are offered each semester, some of which you might find interesting. A 590 topics course is directed study for students who wish to undertake individual reading and study on approved topics. A general topics course is worth three credit hours and at most 2 three-credit 590 courses can be used towards satisfying <acronym title="Microsoft">MS</acronym> degree requirements. It usually takes three to four semesters to complete the work for a Masters degree. </p> <p> Ph.D. students should schedule carefully to be sure that, by the end of the third semester in the department, they will have passed at least one Qualifying Course Examination in each of these four boxes: </p> <table class="inline"> <tr> <th class="leftalign"> Area </th><th class="leftalign"> Course(s) </th> </tr> <tr> <td class="leftalign"> Algorithms and Complexity </td><td class="leftalign"> 580, 584 </td> </tr> <tr> <td class="leftalign"> Systems I </td><td class="leftalign"> 502, 565 </td> </tr> <tr> <td class="leftalign"> Systems II </td><td class="leftalign"> 503, 536 </td> </tr> <tr> <td class="leftalign"> Artificial Intelligence </td><td class="leftalign"> 572 </td> </tr> <tr> <td class="leftalign"> Databases </td><td class="leftalign"> 541, 542 </td> </tr> <tr> <td class="leftalign"> Geometric Modeling, Visualization, Graphics </td><td class="leftalign"> 530, 531, 535, 586 </td> </tr> <tr> <td class="leftalign"> Numerical Computing </td><td class="leftalign"> 514, 515, 520 </td> </tr> <tr> <td class="leftalign"> Parallel and Distributed Computing </td><td class="leftalign"> 525 </td> </tr> <tr> <td class="leftalign"> Security </td><td class="leftalign"> 526, 555 </td> </tr> <tr> <td class="leftalign"> Simulation and Modeling </td><td class="leftalign"> 543, 544 </td> </tr> <tr> <td class="leftalign"> Software Engineering </td><td class="leftalign"> 510 </td> </tr> </table> <p> <strong>Course Advice:</strong> plan on taking three courses in each of your first two semesters, chosen from the required list above. Taking three (rather than four) courses a semester will allow you to concentrate on passing the four qualifiers. Also remember to try and balance the types of course work for each semester, as we described earlier. </p> <p> <strong>Qualifier Advice:</strong> even <acronym title="Microsoft">MS</acronym> students should plan on taking qualifying exams. Should you later decide to switch the the Ph.D. program, having the qualifiers completed will make the transition much easier. </p> <p> <strong>Financial Advice:</strong> note that late registration or late fee remission can result in a hefty financial penalty (about $200). Make sure to get some sort of schedule in place and your fees paid by the time the first scheduling deadline comes around (typically right at the beginning of the semester). This fine can be assessed even if you don&#039;t actually owe money if your schedule is not confirmed, so make sure you finalize your schedule on SSINFO. </p> <p> More information on the courses can be found at <a href="http://www.cs.purdue.edu/graduate_program/curriculum/" class="urlextern" title="http://www.cs.purdue.edu/graduate_program/curriculum/" rel="nofollow">http://www.cs.purdue.edu/graduate_program/curriculum/</a> </p> </div> <!-- SECTION "What Should I Take?" [23-4981] --> <h2><a name="course_descriptions" id="course_descriptions">Course Descriptions</a></h2> <div class="level2"> <p> About The Different Courses&hellip; <br/> The following section contains descriptions of CS courses that are offered on the graduate level in our department. It does not include courses offered by other departments (i.e. MATH, EE, STAT, MGMT) that are also available to obtain graduate credit in the M.S. and Ph.D. programs in CS. For transferring credit check with your academic advisor, or with Dr. Gorman. </p> <p> As there are substantial differences among the courses offered in regard to the amount and type of work for assignments, projects, in-class presentations, term papers, and exams, we are presenting a table that shows the major differences among these courses. The info given is mostly drawn from a survey among grad students in our department in Spring 1993, although some additions have been made for courses which were not included in the 1993 survey. Although some of the courses have changed over the years, this list will give you a rough idea of the type of workload to expect. However, course contents and workload depend considerably on the professor who teaches the course. The same number of programming assignments for two courses does not necessarily indicate a comparable effort in writing the code. Therefore, nothing presented here should be taken literally, only as an outline. Do not be afraid to talk to the professor who will teach the course and ask him more detailed information. Not all courses are offered every semester. Check with the bulletin board across from CS 172, or <a href="http://www.cs.purdue.edu/acad-info/" class="urlextern" title="http://www.cs.purdue.edu/acad-info/" rel="nofollow">http://www.cs.purdue.edu/acad-info/</a>. Furthermore, it is not our purpose to show you a way to a degree at Purdue with the least possible effort, but to give you the chance to balance your course load for each semester according to your interests and degree program requirements. </p> <p> The official prerequisites listed on the course pages are not completely accurate in terms of what you really need. The survey disclosed that unstated prerequisites for nearly every course, except theory courses, are a good understanding of the C programming language, the UNIX Operating System, and the X Window System. It is not absolutely necessary to know these to do well in every course, but knowing them can greatly increase your efficiency. A comment nearly everyone made at some point was: ``The course is hard and requires lots of work&hellip;but in the end it&#039;s worth it.&#039;&#039; So, you can look forward to a lot of pain during the semester, and a very good feeling afterwards. </p> <table class="inline"> <tr> <th class="leftalign"> Course </th><th class="leftalign"> Topic </th><th class="leftalign"> Load </th> </tr> <tr> <td class="leftalign"> CS 502 </td><td class="leftalign"> Compiler Design </td><td class="leftalign"> written(1), program.(5), proj.(1), quizzes(1), midterm, final - heavy programming </td> </tr> <tr> <td class="leftalign"> CS 503 </td><td class="leftalign"> Operating Systems </td><td class="leftalign"> written(1), program.(5), proj.(1), midterm, final - heavy reading, heavy programming </td> </tr> <tr> <td class="leftalign"> CS 510 </td><td class="leftalign"> Software Metrics </td><td class="leftalign"> - moderate reading </td> </tr> <tr> <td class="leftalign"> CS 514 </td><td class="leftalign"> Numerical Analysis </td><td class="leftalign"> written + program.(8), midterm, final - math and programming </td> </tr> <tr> <td class="leftalign"> CS 515 </td><td class="leftalign"> Analysis of Linear Systems </td><td class="leftalign"> - math </td> </tr> <tr> <td class="leftalign"> CS 520 </td><td class="leftalign"> Computational Methods </td><td class="leftalign"> written + program.(10), proj.(2), midterm, final - math, problem solving, big projects </td> </tr> <tr> <td class="leftalign"> CS 525 </td><td class="leftalign"> Parallel Computing </td><td class="leftalign"> written, program, midterm, final </td> </tr> <tr> <td class="leftalign"> CS 526 </td><td class="leftalign"> Information Security </td><td class="leftalign"> written(5), project(3), midterm, final </td> </tr> <tr> <td class="leftalign"> CS 530 </td><td class="leftalign"> Introduction To Scientific Visualization </td><td class="leftalign"> written, program, midterm, final </td> </tr> <tr> <td class="leftalign"> CS 535 </td><td class="leftalign"> Computer Graphics </td><td class="leftalign"> program.(4), midterm - very heavy programming </td> </tr> <tr> <td class="leftalign"> CS 536 </td><td class="leftalign"> Computer Networks </td><td class="leftalign"> written(5), program.(3),midterm, final - reading, heavy programming </td> </tr> <tr> <td class="leftalign"> CS 541 </td><td class="leftalign"> Database Systems </td><td class="leftalign"> written(5), program.(2), midterm, final - reading, light programming </td> </tr> <tr> <td class="leftalign"> CS 542 </td><td class="leftalign"> Distributed Database Systems </td><td class="leftalign"> written(3), proj.(1), midterm, final - reading, light programming </td> </tr> <tr> <td class="leftalign"> CS 543 </td><td class="leftalign"> Introduction to Simulation and Modeling of Computer Systems </td><td class="leftalign"> written(2), program.(6), proj.(1), presentation(1), midterm, final - heavy programming </td> </tr> <tr> <td class="leftalign"> CS 544 </td><td class="leftalign"> Simulation and Modeling of Computer Systems </td><td class="leftalign"> presentation(1), paper evaluation(2) - heavy reading </td> </tr> <tr> <td class="leftalign"> CS 555 </td><td class="leftalign"> Cryptography </td><td class="leftalign"> written(6), proj.(1), midterm, final - moderate reading and problem solving, math </td> </tr> <tr> <td class="leftalign"> CS 565 </td><td class="leftalign"> Programming Languages </td><td class="leftalign"> written + program.(5), proj.(2), midterm, final - heavy reading, theory, projects </td> </tr> <tr> <td class="leftalign"> CS 580 </td><td class="leftalign"> Algorithm Design </td><td class="leftalign"> written(8), midterm, final - theory and problem solving </td> </tr> <tr> <td class="leftalign"> CS 584 </td><td class="leftalign"> Theory of Computation </td><td class="leftalign"> written(10), presentation(1), quizzes(2), midterm, final - theory, participation in class </td> </tr> <tr> <td class="leftalign"> CS 603 </td><td class="leftalign"> Advanced Operating Systems </td><td class="leftalign"> - reading, systems programming </td> </tr> <tr> <td class="leftalign"> CS 614 </td><td class="leftalign"> Ordinary Differential Equations </td><td class="leftalign"> - math </td> </tr> <tr> <td class="leftalign"> CS 615 </td><td class="leftalign"> Partial Differential Equations </td><td class="leftalign"> - math and programming </td> </tr> <tr> <td class="leftalign"> CS 636 </td><td class="leftalign"> Internetworking </td><td class="leftalign"> program.(3), proj.(1), presentation(2), quizzes(2), oral final - heavy programming, participation in class </td> </tr> <tr> <td class="leftalign"> CS 638 </td><td class="leftalign"> Multimedia Networking and Operating Systems </td><td class="leftalign"> written(7), project(3), presentation(3) </td> </tr> </table> </div> <!-- SECTION "Course Descriptions" [4982-10785] --> <h1><a name="registering" id="registering">Registering</a></h1> <div class="level1"> <p> The course-request forms are on the table in front of Amy Ingram in <acronym title="Lawson Computer Science Building">LWSN</acronym> 1137, along with some instructions for filling out the top portion. Add the courses you want, get the form signed by your advisor, and take the form back to <acronym title="Lawson Computer Science Building">LWSN</acronym> 1137. Amy Ingram will either keep of all it and take care of your registration (this happens before semester begins), or keep the yellow copy and instruct you to take the white copy to the registrar (This happens during the semester). Dr. Gorman sends reminders regarding important scheduling dates and process every semester. </p> <p> The Registrar’s Office is in the lowest level of Hovde Hall, Room 45. Take your white copy and wait in line, doing what the signs tell you to do. Your requests will be typed into the University’s computer system on the spot, but the actual registration is an overnight batch job. Your course schedule and invoice can be picked up the next day at the same place. </p> <p> Once you have your invoice, you can pay (in cash) at the Bursar’s Office teller windows, or (by check) at the Bursar’s drop box. </p> <p> The schedule you pick up may not have all the courses you requested. Over-full courses and other problems may not be detected when your request is typed in, but only when the overnight registration job runs. If you are requesting very popular courses, it can be a good idea to include second choices on your original course request. If you didn’t do that, you can submit another request form to add other classes. You will have another overnight wait to get your revised schedule and invoice. </p> <p> If you decide to add or drop a course after your registration, you must fill out an “ADD/DROP” form (the very same form you used to register), available in room <acronym title="Lawson Computer Science Building">LWSN</acronym> 1137. Depending on when you do this, you may need your advisor’s signature and/or instructor’s signature. Directions are on the back of the form. </p> <p> If you are paying for your education with some loan money, there is an additional step or two to the process, at least involving the infamous Window M in Hovde. This is where you sign your loan check(s) and have your account with the University credited. You may now be able to arrange direct deposit and avoid standing in line for checks. Ask questions at the information desk in the lower level of Hovde if things aren’t obvious when it comes time to show the money </p> </div> <!-- SECTION "Registering" [10786-13164] --> <h1><a name="ph.d" id="ph.d">Ph.D.</a></h1> <div class="level1"> <p> The basic requirements for getting a Ph.D. at Purdue are fairly straightforward. This section is a quick overview of what needs to be done to satisfy those requirements. For more information, we suggest talking to older grad students (we&#039;ve all been through at least part of this stuff) and professors. In a nutshell, you begin by satisfying the English proficiency requirements if you are not a native speaker of English. You do the requisite number of courses, taking care to do the proper core courses. You pass the quals, find an advisor, dream up a problem, take a prelim, solve the problem, undergo a public defense, wear a black robe with a blue hood, have your photograph taken with assorted luminaries at the Hall of Music, and then ride into the blue yonder. Allow us to elaborate&hellip; </p> </div> <!-- SECTION "Ph.D." [13165-13981] --> <h2><a name="core_courses" id="core_courses">Core Courses</a></h2> <div class="level2"> <p> The phrase “core courses” used to refer to seven specific courses every Ph.D. candidate was required to take. Starting with the Fall of 1999, you get some latitude in choosing those seven courses. They will be the four you choose for your qualifying course examinations, which already cover four different areas, plus three more eligible courses that you choose. At least one of these must be in another area, so that your seven core courses represent at least five areas. The only official list of eligible courses is the one at <a href="http://www.cs.purdue.edu/grad-info/gradinfo/qual.html" class="urlextern" title="http://www.cs.purdue.edu/grad-info/gradinfo/qual.html" rel="nofollow">http://www.cs.purdue.edu/grad-info/gradinfo/qual.html</a>. You should try to take these courses as early in your grad student career as possible, to prepare for the qualifying exams. </p> </div> <!-- SECTION "Core Courses" [13982-14717] --> <h2><a name="qualifiers" id="qualifiers">Qualifiers</a></h2> <div class="level2"> <p> These are the exams that decide if you are capable of doing a Ph.D., or at least so the department claims. The format has recently been revised, so some older graduate students may not be completely familiar with the new process. Dr. Gorman is a definitive source for information. The Qualifying Exams (usually known as Qual 1s) are tests taken in addition to a core course&#039;s final examination (it may be a separate exam, or additional problems on the final examination). You must pass these exams in four courses, in the first three semesters of your graduate work (so at least four of the courses you take in your first three semesters must be qual courses). </p> <p> The exams are usually graded within two weeks. The Graduate Committee then meets in a smoke-filled room, studies the entrails of a farm herbivore (or uses another equally scientific, inscrutable, and never really disclosed method) and decides who passes. The last step is sometimes delayed, resulting in extra secretion of HCl in the duodenum of the candidates. Usually, a student will pass or fail outright, but sometimes students are asked to take an additional oral or written exam in one of the areas they were weak in. There is no set percentage of students that pass. </p> <p> The key to passing Qual 1s is studying. Hard. The best way to study is to do lots of problems, and then do some more. When you get tired of this and want to take a break, do some MORE problems. Repeat this the last two months of a course. The best source of problems is old qualifiers, copies of which (back to about 1987) can be obtained from Amy Ingram (CS 102) and in the Math Library on the 3rd floor of Math Building. Some old grad students have pre-worked sets of old qualifiers and other tests (midterms and finals). There are now reading lists available for all of the classes; see Amy Ingram for these. </p> <p> Following the Qual 1s, you will have two semesters to pass the second stage Qualifying Exam, or Qual 2. The Qual 2 is currently an oral examination, for which you will be asked to read a number of important papers in your chosen area of research and then discuss their finer points with a committee of examining professors. Qual 2s seem to be a widely varying and often unique experience, so you might want to talk to a few post-Qual students and your advisor to get a feel for what to expect in your area. If you pass quals, you&#039;ve leaped the highest hurdle on the way to that coveted sheepskin. </p> </div> <!-- SECTION "Qualifiers" [14718-17193] --> <h2><a name="advisor_and_plan_of_study" id="advisor_and_plan_of_study">Advisor and Plan of Study</a></h2> <div class="level2"> <p> After passing Quals, get a thesis advisor (if you don&#039;t already have one). This will be the person overseeing your research while you work on your dissertation. In other words, a thesis advisor is a combination friend, co-worker, guru, and mother/father figure. He or she will therefore be one of the more important people in your life for the next couple of years, so choose carefully. Desirable traits in an advisor include: </p> <ul> <li class="level1"><div class="li"> Easy for you to get along with </div> </li> <li class="level1"><div class="li"> Interested in the same area(s) you are </div> </li> <li class="level1"><div class="li"> Will not be leaving in the next couple of years (that you can tell) </div> </li> <li class="level1"><div class="li"> Can supervise your work closely (if you like that) </div> </li> <li class="level1"><div class="li"> Won&#039;t pressure you (if you want it that way) </div> </li> <li class="level1"><div class="li"> (Optional) Has grant money to support you </div> </li> </ul> <p> Usually, you talk to several professors in your area before making a decision. It is possible to change advisors after making your decision, but it is not generally recommended because it tends to add a year to the time you spend here. Once you have an advisor, your next job is to form the rest of your advisory committee. These will be the people who read your thesis, point out flaws, and eventually decide whether you have done Ph.D.-caliber work. As such, they are important people in your education. You and your advisor find (at least) two other professors interested in your area to be on this committee, one of which should be a senior faculty member. About the time you are doing this, you should also file a Plan of Study, an official document telling the administration what classes you have taken, what courses you plan to take, your area of interest, and other vital information. See Amy Ingram for the form. Normally, you should find an advisor and file the plan of study by the end of the semester after you pass Quals. The plan must include at least five more courses (in addition to the core seven) that are not independent studies or seminars. </p> </div> <!-- SECTION "Advisor and Plan of Study" [17194-19132] --> <h2><a name="thesis" id="thesis">Thesis</a></h2> <div class="level2"> <p> Now that you&#039;ve demonstrated your aptitude at passing hard tests, and thus qualified yourself for research work, you have to thrash about, reading landmark papers from your area, trying to find a thesis topic. This is probably the second most difficult step in the process (the most difficult is, of course, passing Quals). Remember that your goal at this point is to find a topic that you can learn to do research on; that&#039;s what the degree process is about. The topic doesn&#039;t have to be earth-shattering; in fact, you&#039;ll probably get out much more quickly if it isn&#039;t. Save the good stuff for when you&#039;re on your own trying to get grants and such. Also, consider that by the time you get done with your thesis, you will be eating, sleeping, living and breathing your topic. Try to pick something that you can survive becoming incredibly intimate with for 12 to 24 months; also, by the time you&#039;re done, you&#039;ll probably be burned out on the topic, so pick something you won&#039;t regret not working on for some time after you&#039;ve graduated. </p> <p> Once you&#039;ve figured out exactly what it is that you&#039;re going to research, take your Preliminary Examination (usually known as Prelims). The party line on this exam is that it tests the student&#039;s competence in a research area and readiness for research on some specific problem. In practice, it is a public thesis proposal, given so that your committee can see what you&#039;ve been up to, where you&#039;re headed, and give constructive criticism. The Graduate Committee will appoint one extra member to your advisory committee for this exam, presumably to keep everyone honest. Usually, this is given about one year after Quals, after you get your first results on your thesis topic. Note, however, that the official rule is that Prelims must be taken by the end of the third semester following the one in which the student passes the qualifying exam and at least two semesters before the examination on the dissertation. </p> <p> Now, work like crazy, trying to prove whatever it is that you&#039;re trying to prove. Build, measure, tear down, read, build some more, and conclude. Write it all down in a nice form; we&#039;ll call that your dissertation. Hope no one else is doing exactly the same thing at another university; if they are, and manage to publish their results before you, even by one week, you&#039;re probably out of luck, and have to start all over again on a new topic. Get your committee to agree that they like your dissertation. Then you have to make it satisfy the department&#039;s rules for Thesis Format, which define what a CS dissertation must look like, dealing with margins, figures, captions, etc. This used to be set by the University, but recently control has been given to each department. You can find the rules in <a href="http://www.cs.purdue.edu/acad-info/thesis.format" class="urlextern" title="http://www.cs.purdue.edu/acad-info/thesis.format" rel="nofollow">http://www.cs.purdue.edu/acad-info/thesis.format</a>. Fortunately, there are macro packages for LATEX (the most-used typesetting system in the department) that do most of the nitty-gritty stuff for you. There may also be a format file for Word for Windows, if for some incomprehensible reason you want to subject yourself to that. Finally, schedule a final defense. This is a public oral exam before your committee and anyone else that cares to come; it is where you present what you&#039;ve done for the past few years. It&#039;s also the last chance for people to pick your work apart and point out flaws; if there are some major ones, you may have to go back and cover them and schedule another defense (ouch). Hopefully, your committee will have pointed them out before the defense, so you have all the answers right at your fingertips. If you&#039;ve done all your work, this should be a breeze. </p> </div> <!-- SECTION "Thesis" [19133-] --></div> </body> </html> </html>
</DOC>
