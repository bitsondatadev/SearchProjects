<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/fahmy/cs354f03/unix.html </DOCNO>
<HTML> <HEAD> <TITLE>A brief introduction to UNIX and xemacs</TITLE> </HEAD> <BODY bgcolor="#FFFFFF"> <FONT FACE = "helvetica"> <H1>A brief introduction to UNIX and xemacs</H1> <hr> <h3> Obtain an account</h3> You will need an account in this course for the computer <i>mentor.cc.purdue.edu</i> that is administered by ITaP-- formerly PUCC (Purdue University Computer Center). You will login into this computer remotely to compile your programs. <p>Before you go to your PSO, make sure that you know the login and password for mentor. This is the same account and password that you use for the PCs in the Purdue computer labs. If you don't know your ITaP login and password go to MATH 231 to get it before your PSO. <br>&nbsp; <h3> Login into mentor</h3> Click on the icon on the screen that is labeled "mentor". This will connect you to the computer mentor.cc.purdue.edu. Type your ITaP login and password. <h3> Change your current shell to tcsh</h3> The default shell for your mentor account is called "csh" (pronounced Ce shell). This shell does not have line editing, so we recommend you to switch to tcsh (pronounced Te Ce shell) instead. Type the following to switch your current shell to tcsh: <blockquote>&nbsp; <br><tt>mentor.cc.purdue.edu% chsh</tt> <br><tt>Changing login shell for &lt;your-login> on *all* ACMAINT hosts.</tt> <br><tt>Old shell: /bin/csh</tt> <br><tt>New shell [/bin/csh]: /usr/local/bin/tcsh</tt></blockquote> Now logout typing <blockquote><tt>mentor.cc.purdue.edu% exit</tt></blockquote> Login into mentor again. After you login, you should obtain a ">" prompt that is the tcsh prompt. <h3> Simple UNIX commands</h3> The most commonly used UNIX command is "ls".&nbsp; Type: <blockquote><tt>> ls</tt></blockquote> The command "ls" with no arguments lists the contents of the current directory. If you want to see the details of the files, type: <blockquote><tt>> ls -al</tt></blockquote> The command "pwd" prints the directory path of the <i>current directory. </i>This <i>current directory </i>is the directory where the shell is currently in. Type: <blockquote><tt>>pwd</tt> <br><tt>/home/lookout/&lt;some-letter>/&lt;login></tt></blockquote> The directory path&nbsp; printed is a list of the directories necessary to reach the current directory from the root directory. <p>To create a new directory (for example a directory called cs354), type: <blockquote><tt>> mkdir cs354</tt> <br><tt>> ls</tt></blockquote> To change the current directory to the cs354/ directory, type: <blockquote><tt>> cd cs354</tt> <br><tt>> ls</tt></blockquote> You will notice there are no files in there. Now type: <blockquote><tt>> ls -al</tt></blockquote> You will see two files: "." and ".." One dot means the current directory, and ".." means the parent directory. <p>To change the current directory to the parent directory type: <blockquote><tt>> cd ..</tt></blockquote> The home directory is the directory where all your files are stored and is where the current directory points to when you login. To change the current directory to your home directory type "cd" with no arguments. Type: <blockquote>> cd <br>> pwd <br>> ls</blockquote> Sometimes you would like to go back to the previous command. To do that in tcsh type the <i><tt>&lt;up arrow></tt></i> (the key that has the arrow pointing upwards). Type: <blockquote><tt>> &lt;up arrow></tt></blockquote> several times and you will get the last commands. To execute the current command displayed type <i>&lt;ENTER></i>. You may also type the <i><tt>&lt;down-arrow></tt></i> to go to the next command. <p>For example, type <i>&lt;up-arrow> </i>until you find the <tt>"ls -al"</tt> command and then type &lt;ENTER>. <p>If you have made an error while typing, you may use the &lt;left-arrow>,&nbsp; &lt;right-arrow>, or &lt;backspace> to move the cursor and correct it. <p>You don't need to type all the characters for a file or command. You may use &lt;tab> and &lt;ctrl-d> to complete the name of a file. <p>For example, type: <p><tt>> ls /usr/j<i>&lt;tab></i></tt> <p>This will complete to "ls /usr/java" <p>If the prefix matches several files, you may see a list of files matched by typing: <p>&nbsp;<tt>> ls /usr/p<i>&lt;ctrl-d></i></tt> <p>This will show all the files that start with "/usr/p" <p>Also you can reffer to a list of files by using the character "*". The "*" character in a file name represent one or more characters. For example: <p><tt>> ls /usr/lib/*.a</tt> <p>Lists all the files that end in ".a" in the directory /usr/lib. <p> <br>&nbsp; <center><table BORDER WIDTH="70%" NOSAVE > <caption> <h3> Summary of UNIX commands</h3> </caption> <tr NOSAVE> <td NOSAVE>ls</td> <td>Lists the contents of the current directory</td> </tr> <tr> <td>ls -al</td> <td>Lists the contents of the current directory in detail</td> </tr> <tr> <td>pwd</td> <td>Prints the path of the current directory</td> </tr> <tr> <td>mkdir <i>new-directory</i></td> <td>Create a new directory</td> </tr> <tr> <td>cd <i>directory-path</i></td> <td>Change to a directory</td> </tr> <tr> <td>cd</td> <td>Change to home directory</td> </tr> <tr> <td>cp <i>old-file new-file</i></td> <td>Copy a file from old-file to new-file</td> </tr> <tr> <td>mv <i>old-file new-file</i></td> <td>Rename a file from old-file to new-file</td> </tr> <tr> <td>rm <i>file</i></td> <td>Remove a file</td> </tr> <tr> <td>echo "message"</td> <td>Outputs the string "message"&nbsp;</td> </tr> <tr> <td>&lt;up-arrow></td> <td>Get previous command</td> </tr> <tr> <td>&lt;down-arrow></td> <td>Get next command</td> </tr> <tr> <td>&lt;left-arrow>, &lt;right-arrow></td> <td>Move cursor to the left or rigth.</td> </tr> <tr> <td>&lt;tab></td> <td>Path-completion</td> </tr> </table></center> <h3> Running xterm</h3> The xterm program is similar to <i>telnet</i> but has other flexibilities such as window-resize. To run xterm type: <blockquote><tt>> /usr/openwin/bin/xterm -sb &amp;</tt></blockquote> The "-sb" option is for scroll-bar and the "&amp;" is to run <i>xterm</i> in the <i>background. </i>Running a program in the background means that the shell will return a prompt immediately and will not wait until the program completes. <p>You may open as many xterm windows as you want using the command above. <h3> Running xemacs</h3> We strongly recommend you to use xemacs to edit your files. xemacs is a professional editor for the UNIX environment. To run xemacs type the following from the xterm window. <blockquote><tt>>/opt/SUNWspro/bin/xemacs &amp;</tt></blockquote> This command will run xemacs in the background. You will see the xemacs window appear on your screen. <p>You can use xemacs using the pull-down menus like other editors with a graphical user interface. If for some reason you are stuck in the prompt at the bottom line type <tt>&lt;ctrl-]></tt> More information on xemacs can be found in <a href="xemacs-tutorial.txt">xemacs-tutorial.txt</a>. <h3>Copying and pasting across windows</h3> You can use your mouse to copy and paste across windows as follows. Highlight the text you wish to copy using the left mouse button. Move the mouse to the window in which you wish to paste. Make sure the cursor is at the position where you wish to paste (click the left mouse button to reposition the cursor, if necessary). Now you can click the middle mouse button to paste the highlighted text into the other window! <h3> Finding other UNIX users</h3> To see the users who are currently logged in in mentor type "who" <blockquote><tt>> who</tt></blockquote> Execute this command and find your name in the list. <h3> Using the UNIX file system</h3> The UNIX file system is a hierarchy of directories that start with the root directory "/" <p>You may list the contents of this directory typing: <blockquote><tt>> ls /</tt></blockquote> There are some important directories such as: <p><tt>/dev&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; All the devices of the machine (terminals, printers etc.)</tt> <br><tt>/etc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Administration</tt> <br><tt>/usr/include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Header files used for "C" programs</tt> <br><tt>/usr/bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Commands</tt> <p> <h3> The home directory</h3> Every student with an account has a home directory. The home directory is a diectory reserved for you where you will store your programs and homeworks. When the special character "~" is at the beginning of an file name, it refers to the home directory of the user whose login name follows the "~". <p>Try <blockquote><tt>> ls ~</tt> <br><tt>> ls ~/cs354</tt> <br><tt>> ls ~cs354&nbsp;&nbsp; - Lists the cs354 home directory</tt></blockquote> <h3> Using wildcards</h3> When the special character <font size=+2>"*"</font> appears in the argument of an UNIX command, it will be expanded to all the files that match that argument. <p>For example, type: <blockquote><tt>> cd /bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Go to /bin directory</tt> <br><tt>> ls&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Lists all the files in /bin</tt> <br><tt>> ls m*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Lists the commands that start with m</tt> <br><tt>> ls *ma*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Lists all the files that contain ma</tt> <br><tt>> ls *ma* *ta&nbsp;&nbsp; - Lists all the files that contain "ma" or end with "ta"</tt></blockquote> Now try to lists all the files that start with m and that contain g. <p>Wildcards do not match files that start with a "." . If you want to see those files, you will have to either use "ls -al" or match those files explicitly. <p>Type: <blockquote><tt>>cd&nbsp;&nbsp;&nbsp;&nbsp; - Goes to home directory</tt> <br><tt>>ls&nbsp;&nbsp;&nbsp;&nbsp; - Lists files in home directory (there are no files that start with "."</tt> <br><tt>>ls -al - Lists all files, including the ones that start with "." and also prints timestamp</tt> <br><tt>>ls .*&nbsp; - List all files that start with "."</tt> <br><tt>>echo .* - Prints to the screen the names of the files that match .*</tt></blockquote> <h3> The .login file</h3> You will see in your home directory that there is a <b><i>.login</i></b> file. This file contains a list of commands that are executed every time that you login. <h3> Summary of directory commands</h3> <blockquote><tt>>pwd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Gives the current directory</tt> <br><tt>>cd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Goes to the home directory</tt> <br><tt>>cd ..&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Goes to the parent directory</tt> <br><tt>>cd &lt;dir>&nbsp;&nbsp;&nbsp; - Goes to a specific directory &lt;dir></tt> <br><tt>>mkdir &lt;dir> - Creates a new directory</tt></blockquote> In your home directory, create the following directory structure: <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<tt> ~/cs354/lab1/ ---&nbsp; that contains</tt> <p><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subdir1/&nbsp;&nbsp; subdir2/</tt> <p><tt>&nbsp;&nbsp;&nbsp; subdir1/ contains</tt> <p><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subdir11/ subdir12/</tt> <p><tt>&nbsp;&nbsp;&nbsp; subdir2/ contains</tt> <p><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subdir21/ subdir22/</tt> <br>&nbsp; <h3> Redirecting standard output to a file</h3> Every command in UNIX has a "Standard Input", "Standard Output", and a "Standard Error". By default, "Standard Input" is the keyboard, and, "Standard Output" and "Standard Error" are the computer display. However, the input and outputs could be files. In this section you will see how to redirect input and outputs to files. <p>To redirect the standard output of a command to a file you need to add <b>"<font face="Courier New">> filename</font>"</b> at the end of the command. For example, to write the list of files in your home directory to a file <b>"<font face="Courier New">ls-out</font>"</b> type: <blockquote><font face="Courier New">cd</font> <br><font face="Courier New">ls > ls-out</font></blockquote> You can edit the file <b>ls-out</b> to see its contents. Alternatively, you can use the command "<b>cat filename</b>" to print the contents of the file to the screen. For example to print the contents of&nbsp; <b>"ls-out"</b> type: <blockquote><font face="Courier New">cat ls-out</font></blockquote> Also, it is possible to append the output of a command to an existing file by adding <b>">> filename"</b> at the end of the command. For example, type: <blockquote><font face="Courier New">ls >> ls-out</font> <br><font face="Courier New">ls >> ls-out</font> <br><font face="Courier New">cat ls-out</font></blockquote> Alternatively to <b><i>cat</i></b> you may use <b><i>more. </i></b>The difference between these two commands is that for large files <b><i>cat</i></b> does not stop and <b><i>more </i></b>will prompt after every page of text displayed. When using more type <b><i>&lt;space></i></b> to go to the next page. <p>Type: <blockquote><font face="Courier New">more ls-out</font></blockquote> <h3> Redirecting both standard output and standard error</h3> In UNIX you may redirect the "Standard Output" and&nbsp; "Standard Error" to two different files. However, most of the time you would like to redirect both to a single file. To do this add <b>">&amp; filename"</b> to create a new file or <b>">>&amp; file"</b> to append to an existing file. <p>For example, try listing a non-existing directory and send the output to <b>"errout"</b>. <blockquote><font face="Courier New">ls none-existing > errout</font></blockquote> This command will print an error to the screen instead of the <b>"errout"</b> file. To redirect both the output and the errors of the command to <b>"errout" </b>type: <blockquote><font face="Courier New">ls none-existing >&amp; errout</font> <br><font face="Courier New">cat errout</font> <br><font face="Courier New">ls >>&amp; errout</font> <br><font face="Courier New">cat errout</font></blockquote> <h3> Redirecting input</h3> You can also redirect the input of a command to a file. This is often done by the TAs during the grading of your projects. <p>The input of the command <b>"cat"</b> with no arguments is the standard input. You can redirect the standard input of a command by adding <b>"&lt; filename"</b> at the end of the command. For example the following two commands will display the contents of the file ls-out: <blockquote><font face="Courier New">cat ls-out</font> <br><font face="Courier New">cat &lt; ls-out</font></blockquote> <h3> The <b>grep</b> command</h3> The command "<b>grep word filename"</b> displays the lines of a file that contain <b>"word". </b>Go to the directory <b>~/cs354/lab2</b> directory and print all the lines that contain <b>"System" </b>in the file <i>EggBasket.java:</i> <blockquote><font face="Courier New">cd</font> <br><font face="Courier New">cd cs354/lab2</font> <br><font face="Courier New">grep System EggBasket.java</font></blockquote> To print the lines that contain the word <b>"Total"</b> in the file <i>EggBasket.java </i>type: <blockquote><font face="Courier New">grep Total EggBasket.java</font></blockquote> To print the lines that contain the word "<b>System"</b> in all the files in the current directory type: <blockquote><font face="Courier New">grep System *</font></blockquote> In this case <font face="Courier New">"*" </font>matches the file names <i>EggBasket.java and Hello.java.</i> <h3> <b>Using pipes</b></h3> In UNIX, you can feed the output of a command into the input of another command by separating them with the character "|" to create complex commands. For example, to display all the lines of the file EggBasket.java that contain both the word <b>"System"</b> and the word <b>"baskets"</b> you can type: <blockquote><font face="Courier New">grep System EggBasket.java | grep baskets</font></blockquote> In this command line the output of <b>"<font face="Courier New">grep System EggBasket.java"</font></b> goes to the input of the command <b>"<font face="Courier New">grep baskets"</font></b><font face="Courier New">.</font> <p>Also you may send the output of this command to a file: <blockquote><font face="Courier New">grep System EggBasket.java | grep baskets > out</font> <br><font face="Courier New">cat out</font></blockquote> <h3> Using aliases</h3> You may create an alias for a complex command to reduce the number of characters you type. When you want to execute the command you just type the alias. For example, you can create an alias called <b>"ll"</b> for the command <b>"ls -al"</b> that lists all the files and the timestamps of a directory: <blockquote><font face="Courier New">> alias ll ls -al</font> <br><font face="Courier New">> ll</font></blockquote> Now typing <b>"ll"</b> will be equivalent to typing <b>"ls -al"</b>. <p>The alias you have created will go away when you logout. If you want to make the alias permanent, you will have to add the alias command to your <b>~/.login file</b>. If this file does not exist, you can create one. <p>To remove an alias use <b>"unalias":</b> <blockquote><font face="Courier New">> unalias ll</font> <br><font face="Courier New">> ll</font></blockquote> <h3> Environment variables</h3> The shell has a list of environment variables. To print the list of environment variables type: <blockquote><font face="Courier New">> printenv</font></blockquote> or to print a single variable type <b>"printenv varname"</b>. For example, to print the value of the variable <b>PATH</b> type: <blockquote><font face="Courier New">> printenv PATH</font></blockquote> The most important variables are the following: <p>PATH - It is a list of colon separated directories where the commands typed are found. The shell will search the command in each directory until found or the end of the list is reached. By default the PATH variable includes the directory <b>/bin</b>. <p>DISPLAY - It is the Internet address of the computer where the x-windows applications are displayed. By default it is the IP address computer where you login. <p>HOME - it is the home directory. <p>PWD - It is the current directory. <p>SHELL - It is the shell program you are currently using. <p>Type the following: <blockquote><font face="Courier New">printenv DISPLAY</font> <br><font face="Courier New">printenv HOME</font></blockquote> Also you can use the variables as part of a command or argument by typing <b>$ </b>before the variable. For example, to print the contents of your home directory you can type: <blockquote><font face="Courier New">ls $HOME</font></blockquote> That is equivalent to typing: <blockquote><font face="Courier New">ls ~</font></blockquote> You can also change the value of variables using <b><i>"setenv VAR VALUE"</i></b>. For example, to set the value <b><font face="Courier New">~/cs354/lab3</font></b>to variable <b><i>lab3</i></b> you can type: <blockquote><font face="Courier New">setenv lab3 ~/cs354/lab3</font> <br><font face="Courier New">printenv lab3</font> <br><font face="Courier New">cd $lab3</font> <br><font face="Courier New">ls</font></blockquote> In this way, you may use <b>$lab3</b> everywhere you need the lab3 path. <p>You may also append a value to an existing environment variable by setting the variable and adding the variable to the value. For example, you may add the directory <b>/opt/SUNWspro/bin</b> to your <b>PATH</b> environment variable in the following way: <p>(Note: The command <b>"which command"</b> tells you in which directory a command was found.) <p>&nbsp;Type: <blockquote><font face="Courier New">printenv PATH</font> <br><font face="Courier New">which xemacs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - It should print that xemacs was not found.</font> <br><font face="Courier New">setenv PATH /opt/SUNWspro/bin:$PATH&nbsp; - Adds xemacs dir to PATH</font> <br><font face="Courier New">printenv PATH</font> <br><font face="Courier New">which xemacs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - It should print that xemacs was found.</font> <br><font face="Courier New">xemacs &amp;</font></blockquote> If after executing <b>"xemacs &amp;"</b> the shell tells you that xemacs was not found, then the variable was not correctly set, try again. Also, it may be possible that you have already set up an alias for xemacs. You may unset the alias by typing <b>"unalias xemacs" </b>and try the previous steps again. <p>To change the value of the PATH variable permanently&nbsp; you need to modify your .login file. <h3> Modifying .login</h3> Using xemacs open the <b><i>.login</i></b> file that is your home directory. Add the following line at the very end of the file: <blockquote><font face="Courier New">setenv PATH /opt/SUNWspro/bin:/usr/openwin/bin:$PATH</font></blockquote> Make sure that this line is spelled correctly in your <b><i>.login</i></b> file. Save the file and exit. Logout from the xterm and the telnet session. Then login again into mentor by clicking on the mentor icon, login, and type: <blockquote><font face="Courier New">> xterm -sb &amp;</font> <br><font face="Courier New">> xemacs &amp;</font></blockquote> You will not need to type the directory of these commands anymore. <h3> Running commands in the background</h3> By default the shell will wait until a command finishes before printing the next prompt. However, in some cases, you don't want the shell to wait. That is the case when you run xemacs and xterm. For these programs you add the character <b><i>"&amp;"</i></b> at the end of the command to make the shell and the command run concurrently, that is, at the same both run at the same time. This is called running a command in<b><i> </i></b>the<b><i> background. </i></b>The default is that the shell waits until the command completes. This is called running a command in the <b><i>foreground</i></b>, and it is the default. <p>When running a command in the background the prompt is printed before the command completes. You may need to type &lt;Enter> to see the shell prompt again. <p>You can run any process in the background. For example: <blockquote><font face="Courier New">> ls /dev&nbsp;&nbsp;&nbsp;&nbsp; -Runs ls in the foreground (default)</font> <p><font face="Courier New">> ls /dev &amp;&nbsp; - Runs ls in the background</font></blockquote> <hr> This tutorial has been adapted from a similar tutorial on Gustavo Rodriguez-Rivera's page. </BODY> </HTML> </HTML>
</DOC>
