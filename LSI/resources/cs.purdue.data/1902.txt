<DOC>
<DOCNO> http://www.cs.purdue.edu/about_us/annual_reports/95/AR95Book-122.html </DOCNO>
<!-- Generated by Harlequin Webmaker 2.1.3; Transducer 1.0.2 --> <HTML> <HEAD> <TITLE> Module Constructs for Object-Oriented and Functional Languages</TITLE> </HEAD> <BODY> <A NAME=HEADING122></A> <A HREF="AR95Book-123.html"><IMG ALIGN = BOTTOM SRC = "Bnext.gif"></A><A HREF="AR95Book-121.html"><IMG ALIGN = BOTTOM SRC = "Bprev.gif"></A><A HREF="AR95Book-66.html"><IMG ALIGN = BOTTOM SRC = "Bup.gif"></A><A HREF="AR95Book-1.html"><IMG ALIGN = BOTTOM SRC = "Btop.gif"></A><A HREF="AR95Book-2.html"><IMG ALIGN = BOTTOM SRC = "Bcontent.gif"></A><BR><A HREF="AR95Book-123.html">[Next] </A><A HREF="AR95Book-121.html">[Previous] </A><A HREF="AR95Book-66.html">[Up] </A><A HREF="AR95Book-1.html">[Top] </A><A HREF="AR95Book-2.html">[Contents]</A> <P> <A NAME=HEADING122-0></A> <H1> Module Constructs for Object-Oriented and Functional Languages</H1> Principal Investigator: <A HREF=AR95Book-38.html>Vincent F. Russo</A><P> Research Assistant: G. Baumgartner<P> <IMG SRC="goldRule.gif" width =100%> <P> This research focuses on designing module constructs that incorporate the best features found among module constructs of object-oriented languages and of functional languages. In particular, we plan to incorporate parametric polymorphism, subtype polymorphism, overloading, type abstraction, and compile-time type inference in a semantically clean manner.<P> The main use of module constructs is to offer mechanisms to help structure large programs. However, the semantics of the module constructs found in object-oriented languages are often not very precisely defined. For example, the use of inheritance as a substitute for subtype polymorphism in many object-oriented languages either leads to an unsound or a too inflexible type system. In addition, it is felt that adding module constructs found in functional languages to object-oriented languages would increase their expressiveness, and vice versa. <P> We are trying to find a compromise between highly expressive module constructs and an efficient implementation on the one hand and a compromise between full type inference as in functional languages and requiring all variables to be declared on the other hand. Currently, we have an implementation of a type abstraction construct for C++ that allows us to decouple subtyping and inheritance, and we are investigating an extension of ML with subtyping and inheritance.<P> <IMG SRC="goldRule.gif" width =100%> <ADDRESS>CS Annual Report - 19 APR 1996</ADDRESS> <A HREF="AR95Book-123.html"><IMG ALIGN = BOTTOM SRC = "Bnext.gif"></A><A HREF="AR95Book-121.html"><IMG ALIGN = BOTTOM SRC = "Bprev.gif"></A><A HREF="AR95Book-66.html"><IMG ALIGN = BOTTOM SRC = "Bup.gif"></A><A HREF="AR95Book-1.html"><IMG ALIGN = BOTTOM SRC = "Btop.gif"></A><A HREF="AR95Book-2.html"><IMG ALIGN = BOTTOM SRC = "Bcontent.gif"></A><BR><A HREF="AR95Book-123.html">[Next] </A><A HREF="AR95Book-121.html">[Previous] </A><A HREF="AR95Book-66.html">[Up] </A><A HREF="AR95Book-1.html">[Top] </A><A HREF="AR95Book-2.html">[Contents]</A> <P> </BODY> </HTML> </HTML>
</DOC>
