<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/cs490t/projects/cameraman/ </DOCNO>
<h1>"Camera Man"</h1> <h2>Team Member</h2> <p>Paul Marks</p> <h2>Overview</h2> <p> My project this semester was to take a Logitech QuickCam Orbit MP, and implement a motion tracking system for its Pan/Tilt motors. Initially, I did this using a C# program, but the libraries I used turned out to be buggy, and we noticed that the C# program took full control over the device, so that a video recording program couldn't possibly run in parallel. So, I then decided to implement the motion tracking as a DirectShow filter. This makes it possible to add motion tracking capabilities to any existing program (such as <a href="http://virtualvcr.sourceforge.net/">Virtual VCR</a>) which supports the use of filters.</p> <h2>Motor Control</h2> <p> The Pan/Tilt control protocol for this camera was not documented anywhere that I could find, so I used this <a href="http://benoit.papillault.free.fr/usbsnoop/">USB Sniffer</a> to reverse-engineer it. I then used <a href="http://libusb-win32.sourceforge.net/">libusb-win32</a> to open the device and issue the commands. </p> <p> Here's the snippet of code that I used to reset the camera to its center position: </p> <pre> void CPanTilt::resetToCenter() { char buf[1] = {0x03}; usb_control_msg(m_dev, 0x21, 0x01, 0x0200, 0x0900, buf, 1, 1000); } </pre> <p> And here's how I make the camera move vertically and horizontally. The smallest motor movements allowed are +/- 1, and larger values will cause larger amounts of motion. </p> <pre> void CPanTilt::moveCam(int horz, int vert) { unsigned char buf[4] = {0x00, 0x00, 0x00, 0x00}; if (horz) { if (horz > 0) horz--; buf[0] = 0x80; buf[1] = (signed char)horz; } if (vert) { if (vert > 0) vert--; buf[2] = 0x80; buf[3] = (signed char)vert; } usb_control_msg(m_dev, 0x21, 0x01, 0x0100, 0x0900, (char *)buf, 4, 1000); } </pre> <h2>Motion Detection</h2> <p> When the camera is not in motion, my algorithm is constantly building a "background image" by merging 90% of the current background with 10% of the latest frame. Essentially, the background consists of the non-moving objects in the scene. </p> <p> Then, I compute the absolute difference between the background and the current frame, and average the locations and difference values together to determine a "center of motion." I then instruct the camera to move its motors toward the computed center. </p> <p> I also added some timing checks to make the camera move more slowly, and to reset the construction of a background image while the camera is in motion. This is because, while the camera is moving, the video is blurred and not very useful for anything. </p> <h2>Build Instructions</h2> <p> I developed this in MS Visual C++ 2005, so it should compile fine in there. You'll also need the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=e15438ac-60be-41bd-aa14-7f1e0f19ca0d&DisplayLang=en">Platform SDK</a> and <a href="http://msdn.microsoft.com/directx/sdk/">DirectX SDK</a> from Microsoft. My project file contains paths to these libraries, which should match up with their default installation directories under Program Files. <h2>Source Files</h2> <p> This project contains 2 main .cpp files, along with some headers. </p> <pre>pantilt.cpp</pre> <p> This file contains the CPanTilt class, which links with libusb-win32 in order to open the Logitech USB device and send motor controls to it. </p> <pre>motiondetect.cpp</pre> <p> This file contains the CMotionDetect class, and is derived from the NullNull filter example from the old DirectX 8 SDK. It consists of a small amount of boilerplate DirectShow filter code, as well as the main motion detection algorithm. </p> <pre>usb.h</pre> <p> This is almost a copy of the usb.h header file from libusb-win32. However, I did have to tweak it a bit by adding "__cdecl" before some of the C functions that I was calling from C++. Otherwise, I was getting cryptic link errors. </p> <h2>Download</h2> <p> Here's the installer for my DirectShow filter. It also contains the installer for libusb-win32, as well as a zip file containing my source code. </p> <p> <a href="MotionDetectionFilter.exe">MotionDetectionFilter.exe</a> </p> <p> Created 2006-12-04 </p> </p>
</DOC>
