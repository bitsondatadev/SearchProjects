<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/ayg/CS251_FALL_99/HTML/hw8addnote.html </DOCNO>
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"> <head> <meta http-equiv=Content-Type content="text/html; charset=windows-1252"> <meta name=ProgId content=Word.Document> <meta name=Generator content="Microsoft Word 9"> <meta name=Originator content="Microsoft Word 9"> <link rel=File-List href="./PSO13_files/filelist.xml"> <title>2-4 Tree / 2-3-4 Tree</title> <!--[if gte mso 9]><xml> <o:DocumentProperties> <o:Author>Stephen Yu</o:Author> <o:Template>Normal</o:Template> <o:LastAuthor>Stephen Yu</o:LastAuthor> <o:Revision>2</o:Revision> <o:TotalTime>136</o:TotalTime> <o:Created>1999-11-23T04:22:00Z</o:Created> <o:LastSaved>1999-11-23T04:22:00Z</o:LastSaved> <o:Pages>7</o:Pages> <o:Words>608</o:Words> <o:Characters>3469</o:Characters> <o:Company> </o:Company> <o:Lines>28</o:Lines> <o:Paragraphs>6</o:Paragraphs> <o:CharactersWithSpaces>4260</o:CharactersWithSpaces> <o:Version>9.2720</o:Version> </o:DocumentProperties> </xml><![endif]--> <style> <!-- /* Style Definitions */ p.MsoNormal, li.MsoNormal, div.MsoNormal {mso-style-parent:""; margin:0in; margin-bottom:.0001pt; mso-pagination:widow-orphan; font-size:12.0pt; font-family:"Times New Roman"; mso-fareast-font-family:"Times New Roman";} h1 {mso-style-next:Normal; margin:0in; margin-bottom:.0001pt; mso-pagination:widow-orphan; page-break-after:avoid; mso-outline-level:1; font-size:28.0pt; mso-bidi-font-size:12.0pt; font-family:"Times New Roman"; mso-font-kerning:0pt; font-weight:normal;} h2 {mso-style-next:Normal; margin-top:0in; margin-right:0in; margin-bottom:0in; margin-left:.25in; margin-bottom:.0001pt; mso-pagination:widow-orphan; page-break-after:avoid; mso-outline-level:2; font-size:28.0pt; mso-bidi-font-size:12.0pt; font-family:"Times New Roman"; font-weight:normal;} h3 {mso-style-next:Normal; margin-top:0in; margin-right:0in; margin-bottom:0in; margin-left:.25in; margin-bottom:.0001pt; mso-pagination:widow-orphan; page-break-after:avoid; mso-outline-level:3; font-size:28.0pt; mso-bidi-font-size:12.0pt; font-family:"Times New Roman";} h4 {mso-style-next:Normal; margin:0in; margin-bottom:.0001pt; mso-pagination:widow-orphan; page-break-after:avoid; mso-outline-level:4; font-size:28.0pt; mso-bidi-font-size:12.0pt; font-family:"Times New Roman";} h5 {mso-style-next:Normal; margin:0in; margin-bottom:.0001pt; mso-pagination:widow-orphan; page-break-after:avoid; mso-outline-level:5; font-size:24.0pt; mso-bidi-font-size:12.0pt; font-family:"Times New Roman"; font-weight:normal;} p.MsoBodyText, li.MsoBodyText, div.MsoBodyText {margin:0in; margin-bottom:.0001pt; mso-pagination:widow-orphan; font-size:24.0pt; mso-bidi-font-size:12.0pt; font-family:"Times New Roman"; mso-fareast-font-family:"Times New Roman";} p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent {margin-top:0in; margin-right:0in; margin-bottom:0in; margin-left:.25in; margin-bottom:.0001pt; mso-pagination:widow-orphan; font-size:22.0pt; mso-bidi-font-size:12.0pt; font-family:"Times New Roman"; mso-fareast-font-family:"Times New Roman";} p.MsoBodyTextIndent2, li.MsoBodyTextIndent2, div.MsoBodyTextIndent2 {margin-top:0in; margin-right:0in; margin-bottom:0in; margin-left:.25in; margin-bottom:.0001pt; mso-pagination:widow-orphan; font-size:24.0pt; mso-bidi-font-size:12.0pt; font-family:"Times New Roman"; mso-fareast-font-family:"Times New Roman";} @page Section1 {size:8.5in 11.0in; margin:1.0in 1.25in 1.0in 1.25in; mso-header-margin:.5in; mso-footer-margin:.5in; mso-paper-source:0;} div.Section1 {page:Section1;} /* List Definitions */ @list l0 {mso-list-id:397169577; mso-list-type:hybrid; mso-list-template-ids:-505275092 1877130440 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;} @list l0:level1 {mso-level-tab-stop:42.0pt; mso-level-number-position:left; margin-left:42.0pt; text-indent:-24.0pt;} @list l1 {mso-list-id:615992094; mso-list-type:hybrid; mso-list-template-ids:595918184 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;} @list l1:level1 {mso-level-start-at:2; mso-level-tab-stop:.5in; mso-level-number-position:left; text-indent:-.25in;} @list l2 {mso-list-id:1962568746; mso-list-type:hybrid; mso-list-template-ids:-1294192586 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;} @list l2:level1 {mso-level-tab-stop:.5in; mso-level-number-position:left; text-indent:-.25in;} @list l3 {mso-list-id:1982534223; mso-list-type:hybrid; mso-list-template-ids:-1844827984 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;} @list l3:level1 {mso-level-start-at:2; mso-level-tab-stop:.5in; mso-level-number-position:left; text-indent:-.25in;} @list l4 {mso-list-id:1983580934; mso-list-type:hybrid; mso-list-template-ids:594151962 239921408 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;} @list l4:level1 {mso-level-tab-stop:42.0pt; mso-level-number-position:left; margin-left:42.0pt; text-indent:-24.0pt;} ol {margin-bottom:0in;} ul {margin-bottom:0in;} --> </style> </head> <body lang=EN-US style='tab-interval:.5in'> <div class=Section1> <p class=MsoNormal><b><span style='font-size:28.0pt;mso-bidi-font-size:12.0pt'>2-4 Tree / 2-3-4 Tree<o:p></o:p></span></b></p> <p class=MsoBodyText>Size Property: Every node has at most four children</p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Depth Property: All the external nodes have the same depth<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <h1><b>Insertion<o:p></o:p></b></h1> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Let’s insert (k,e)<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Search for k in the 2-4 tree T.<span style="mso-spacerun: yes">  </span>The search will end up at an external node z if no element with key k.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Let v be the parent of z.<span style="mso-spacerun: yes">  </span>Insert (k,e) in node v and add a new external child w to v.<o:p></o:p></span></p> <p class=MsoNormal><b><span style='font-size:28.0pt;mso-bidi-font-size:12.0pt'>Overflow</span></b><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'> – Node v becomes a 5-node <o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>A split has to be done on node v<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <h1><b>Splitting<o:p></o:p></b></h1> <p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo1; tab-stops:list .5in'><![if !supportLists]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>1.</span><![endif]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'> Replace v with two nodes v’ and v’’<o:p></o:p></span></p> <p class=MsoNormal style='margin-left:.5in'><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>v’ is a 3-node storing keys k<sub>1</sub> and k<sub>2</sub><o:p></o:p></span></p> <p class=MsoNormal style='margin-left:.5in'><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>v’’ is a 2-node storing key k<sub>4<o:p></o:p></sub></span></p> <p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo1; tab-stops:list .5in'><![if !supportLists]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>2.</span><![endif]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'> If v was the root of T, we create a new root u.<span style="mso-spacerun: yes">  </span>Else, let u be the parent of v<o:p></o:p></span></p> <p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo1; tab-stops:list .5in'><![if !supportLists]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>3.</span><![endif]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>Put k<sub>3</sub> into u and make v’ and v’’ children of u.<span style="mso-spacerun: yes">  </span>If v was i-th child of u, v’ is i-th child of u and v’’ is (i+1)st child of u<o:p></o:p></span></p> <p class=MsoNormal style='margin-left:.25in'><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <h2 style='margin-left:0in'><b>Deletion<o:p></o:p></b></h2> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Let’s delete (k,e)<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Search for key k in T.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Suppose node z has (k,e), key k is the ith key in z and it has only internal-node children.<span style="mso-spacerun: yes">  </span>Then we need to find a node v<o:p></o:p></span></p> <p class=MsoNormal style='margin-left:24.0pt;text-indent:-24.0pt;mso-list:l4 level1 lfo2; tab-stops:list 42.0pt'><![if !supportLists]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>We find the right-most internal node v in the subtree rooted at the ith child of z.<o:p></o:p></span></p> <p class=MsoNormal style='margin-left:24.0pt;text-indent:-24.0pt;mso-list:l4 level1 lfo2; tab-stops:list 42.0pt'><![if !supportLists]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><span style="mso-spacerun: yes"> </span>We swap the item (k, x) at z with the last item of v.<o:p></o:p></span></p> <p class=MsoNormal><b><span style='font-size:28.0pt;mso-bidi-font-size:12.0pt'>Underflow</span></b><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'> - If v was previously a 2-node, then it becomes a 1-node with no item after the deletion.<o:p></o:p></span></p> <h4>Transfer <span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><o:p></o:p></span></h4> <p class=MsoBodyTextIndent2>1. We find a sibling node w of v that is 3-node or 4-node.</p> <p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l1 level1 lfo4; tab-stops:list .5in'><![if !supportLists]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>2.</span><![endif]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'> Move a child of w to v, move a key of w to the parent u of v, and move a key of u to v.<o:p></o:p></span></p> <h3 style='margin-left:0in'>Fusion</h3> <p class=MsoBodyTextIndent style='margin-left:0in'><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>If v has only one sibling, or if both siblings of v are 2-nodes, then fusion is needed.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Merge v with a sibling and move a key from the parent u of v to the merged node.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Parent u may suffer underflow after a fusion operation.<span style="mso-spacerun: yes">  </span>Then transfer/fusion at u may be needed.<span style="mso-spacerun: yes">  </span><o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <h3 style='margin-left:0in'>Red-Black Tree<span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'><o:p></o:p></span></h3> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>1. Root Property: The root is black<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>2. External Property: Every external node is black<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>3. Internal Property: The children of a red node are black (A red node must have two black children)<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>4. Depth Property: All the external nodes have the same black depth.<o:p></o:p></span></p> <h3 style='margin-left:0in'>Insertion</h3> <h5>Let’s insert (k,e) in the Red-Black tree T</h5> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>We search for an external node z in T so that we can make z as internal node and store (k,e) in it (expandExternal(z)).<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Color z with red and its children with black<o:p></o:p></span></p> <h4>Double red<span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><o:p></o:p></span></h4> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>If parent v of z is red, then the parent u of v must be black (rule 3).<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Node v cannot be the root (rule 1) if v is red.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Since the parent v and z are red, there is a double red at node z.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Case 1. The sibling w of v is black<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Rotate(z)<span style="mso-spacerun: yes">  </span>(just like section 7.4 in AVL p.270)<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Recall:<span style="mso-spacerun: yes">  </span>After rotation, node b is the root of the subtree and nodes a and c are the children of b.<span style="mso-spacerun: yes">  </span>Color b black and color a and c red.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Case 2. The Sibling w of v is red<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Color v and w black and their parent u red (Exception: if u is the root, it is colored black)<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>If u is not the root, the double red problem may occur on both node u and its parent.<span style="mso-spacerun: yes">  </span>So, recoloring/rotation may be needed.<span style="mso-spacerun: yes">  </span>We need to propagate up until double red problem is resolved.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <h4>Deletion<span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><o:p></o:p></span></h4> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Let’s delete (k,e) from T<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Search key k in tree T.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Suppose node u store k, and node u does not have an external child.<span style="mso-spacerun: yes">  </span>Then we find the internal node v so that we can move the item at v to u and delete v from the tree T.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>To delete node v, which has an external node w, from the tree T, we do the following.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Suppose r is the sibling of w and x be the parent of v.<span style="mso-spacerun: yes">  </span><o:p></o:p></span></p> <p class=MsoNormal style='margin-left:42.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo5; tab-stops:list 42.0pt'><![if !supportLists]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><![endif]><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>We remove nodes v and w and make r a child of x.<span style="mso-spacerun: yes">  </span><o:p></o:p></span></p> <p class=MsoNormal style='margin-left:42.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo5; tab-stops:list 42.0pt'><![if !supportLists]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><![endif]><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>If node v is red, we are done.<span style="mso-spacerun: yes">  </span><o:p></o:p></span></p> <p class=MsoNormal style='margin-left:42.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo5; tab-stops:list 42.0pt'><![if !supportLists]><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><![endif]><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>If r is red, we color it black and we are done with the deletion process.<span style="mso-spacerun: yes">  </span>Otherwise, we need to do more.<span style="mso-spacerun: yes">  </span>Node r is colored with double black.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Case 1: The sibling y of r is black and has a red child z.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Rotate(z)<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Color a and c black, color b with the former color of x, and color r black.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Case 2: The sibling y of r is black and both children of y are black.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Recoloring: we color r black, color y red.<span style="mso-spacerun: yes">  </span>If x is red, we color it black else we color it double black.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Since x can be double black, we need to propagate up; we consider three cases for x again.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Case 3: The sibling y of r is red.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>We perform an adjustment.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>If y is the right child of x, let z be the right child of y.<span style="mso-spacerun: yes">  </span>Otherwise, let z be the left child of y.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Rotate(z) – After the rotation, y becomes the parent of x.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Color y black and x red.<span style="mso-spacerun: yes">  </span>The sibling of r is black.<o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>We apply either case 1 or case 2 to node r to complete the deletion operation. <o:p></o:p></span></p> <p class=MsoNormal style='margin-left:.25in'><span style='font-size:24.0pt; mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> <p class=MsoNormal><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p> </div> </body> </html> </html>
</DOC>
