<DOC>
<DOCNO> http://www.cs.purdue.edu/homes/cs490t/projects/robots/ </DOCNO>
ï»¿<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> <html xmlns="http://www.w3.org/1999/xhtml"> <head> <meta content="text/html; charset=utf-8" http-equiv="content-type" /> <title>Evolution ER1: Northstar Sensor</title> <link type="text/css" rel="stylesheet" href="default.css" /> </head> <body> <h1 style="text-align: center;"> Evolution ER1: Northstar Sensor</h1> <br /> <h2> Team Members:</h2> <ul> <li>Jeff Stults</li> </ul> <h2> Goal:</h2> <p> To provide a robot that can move to a predefined point in a room. Using infrared sensors, the computer finds its own location and find its way to a given destination. </p> <h2> Description:</h2> <p> This project consists of one main part and three subparts: the sensor interop library and the auxillary programs for use with the robot. Those three programs are a simple tester that outputs position information it gets from the sensor, a more complex program that provides a "point-and-click" interface for directing the robot to move to a location, and a viewer that can play back debug traces of the robot position and heading. </p> <h2> Download Instructions</h2> <p> Download the <a href="build24_bin.zip">latest binary</a>, unzip it, then run the desired program. </p> <h2> User Documentation:</h2> <h3> General</h3> <p> Before using this project, please become familiar with the Evolution Robotics ER1 operational guidelines. Knowledge of how to position the Northstar Projector is required to set up the environment. Knowledge of how to set up the Northstar Detector is also required (where it can pick up signal, how to connect it to a serial port, etc.). </p> <h3> Testing.exe</h3> <p> First, the correct serial port must be identified and configured in the source code. Get the sources and change the serial port used for sensor communications. Now the application can be rebuild and run. </p> <p> Before running, the Northstar Projector needs to be positioned and powered up. The Northstar Detector must be connected to the serial port specified prior to compilation. The ER1 Control Module must be connected, and the ER1 control software must be running with remote connections enabled on port 9000. </p> <p> Upon starting, a command window will appear. Enter the X portion of the coordinate to move to on the first line, and the Y portion on the second. Communications with the sensor will start. If any errors occur, the sensor probably has not been reset. Exit the program and disconnect the sensor's power for 30 seconds. Rerun the application. If errors persist, the physical environment might not be configured correctly (see the Northstar Sensor documentation), or the sensor might not be getting power (for example, the battery is dead). </p> <p> Once any errors are resolved, the ER1 should start moving to the destination point. </p> <h3> RobotIntegration2.exe</h3> <p> Before running, the Northstar Projector needs to be positioned and powered up. The Northstar Detector must be connected to the serial port specified prior to compilation. The ER1 Control Module must be connected, and the ER1 control software must be running with remote connections enabled on port 9000. </p> <p> Upon starting, the serial port that the sensor is connected to must be selected and activated by pressing "Connect". The sensor and robot must then be calibrated together by pressing the "Calibrate" button. At this point, points can be clicked in the large area to the left of the buttons. The last point clicked will be where the robot moves to when the "Move" button is pressed. To stop the robot's motion at any time, press the "Stop" button. </p> <p> If any errors occur, the sensor probably has not been reset. Exit the program and disconnect the sensor's power for 30 seconds. Rerun the application. If errors persist, the physical environment might not be configured correctly (see the Northstar Sensor documentation), or the sensor might not be getting power (for example, the battery is dead). </p> <p> Once any errors are resolved, the program can be started again, and the ER1 should start moving to the destination point. </p> <h3> TraceViewer.exe</h3> <p> This program can open the trace files generated by either Testing.exe or RobotIntegration2.exe. It does not require that the sensor or robot be connected. After starting it, open a trace file, then click "Animate" to watch the robot's position being replayed. Alternatively, every point the sensor picked up and logged can be displayed immediately by clicking on "Render". </p> <h2> List of Files Used and What They Do:</h2> <table> <tr> <th> File</th> <th> Description</th> </tr> <tr> <td> NorthstarSensorLibrary.pdb</td> <td> Debug symbols for the core sensor library.</td> </tr> <tr> <td> NorthstarSensorLibrary.dll</td> <td> Core library handling communication and notification to/from the sensor.</td> </tr> <tr> <td> RobotIntegration2.pdb</td> <td> Debug symbols for demo Evolution ER1 robot integration application.</td> </tr> <tr> <td> RobotIntegration2.exe</td> <td> Demo application that allows for point & click direction of movement for the Evolution ER1.</td> </tr> <tr> <td> Testing.exe</td> <td> Demo application used for testing Evolution ER1 integration. Outputs position information as it comes it and tracks movement of the robot.</td> </tr> <tr> <td> Testing.pdb</td> <td> Debug symbols for test application.</td> </tr> <tr> <td> TraceViewer.exe</td> <td> Allows for viewing of the trace files generated by RobotIntegration2.exe and Testing.exe.</td> </tr> <tr> <td> TraceViewer.pdb</td> <td> Debug symbols for trace viewing.</td> </tr> </table> <h2> Sources and Build Instructions</h2> <h3> Build Instructions:</h3> <ol> <li>Get the Microsoft .NET Framework 2.0</li> <li>Get the source code</li> <li>Open the solution and build OR build via the command line:<br /> <code>%systemroot%microsoft.netframeworkv2.0.50727msbuild.exe .NorthstarSensor.sln /t:Rebuild /p:Configuration=Release </code></li> </ol> <h3> Location of sources in /u/u3/cs490t:</h3> <p> /robots/build24_src.zip<br /> or via svn at <code>svn+ssh://&lt;username&gt;@lore.cs.purdue.edu/u/u3/cs490t/robots/svn/NorthStarSensor</code><br /> or via <a href="build24_src.zip">direct download</a> </p> <h2> Programmers Documentation:</h2> <h3> Trace File Format</h3> <p> These are simple comma seperated or tab seperated value files (CSV/TSV). The columns are: packet id, time ellapsed since start of traces, destination X coordinate, destination Y coordinate, source X coordinate, source Y coordinate, heading from origin to destination, current heading from sensor, amount to turn</p> <h3> Classes</h3> <p> <a href="ClassDiagram1.png">View the class diagram</a> of classes in the core sensor library.</p> <table> <tr> <th> File name</th> <th> Purpose</th> </tr> <tr> <td> NorthstarSensorLibraryBaudRates.cs</td> <td> Enumeration containing the valid baud rate to protocol mapping. </td> </tr> <tr> <td> NorthstarSensorLibraryCalibratePacket.cs</td> <td> Stub for the calibration packet. Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibraryCalibrationModeFlag.cs</td> <td> Stub for calibration packet flags. Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibraryClassDiagram1.cd</td> <td> Diagrams the overal inheritance relationships between every class, enum, and namespace used for the protocol implementation. </td> </tr> <tr> <td> NorthstarSensorLibraryContinuousReportPacket.cs</td> <td> Represents the command instructing the sensor to continously report its position. </td> </tr> <tr> <td> NorthstarSensorLibraryFrequencyResponsePacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibraryGetCeilingPacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibraryGetFrequencyDeltaPacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibraryGetNSamplesPacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibraryGetRoomSpotAssignmentPacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibraryGetThresholdPacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibraryGetVersionPacket.cs</td> <td> Gets the version of the firmware and protocol used on the physical sensor. </td> </tr> <tr> <td> NorthstarSensorLibraryNorthstarSensor.cs</td> <td> Abstracts the sensor interface away from the channel(s) handling communications. Not fully implemented. </td> </tr> <tr> <td> NorthstarSensorLibraryPacket.cs</td> <td> Abstract class encapsulating common packet properties. </td> </tr> <tr> <td> NorthstarSensorLibraryPacketReceivedEventArgs.cs</td> <td> Arguments for the generic packet event. </td> </tr> <tr> <td> NorthstarSensorLibraryPositionAndHeadingEventArgs.cs</td> <td> Arguments for the PositionAndHeading event. </td> </tr> <tr> <td> NorthstarSensorLibraryReceivablePacket.cs</td> <td> Abstract class encapsulating common receivable packet properties. </td> </tr> <tr> <td> NorthstarSensorLibraryReceivablePacketTypes.cs</td> <td> Enum defining the protocol codes for packets received in response to Report or ContinuousReport packets. </td> </tr> <tr> <td> NorthstarSensorLibraryReportEndPacket.cs</td> <td> Represents the end of packets in response to the Report or ContinuousReport packets. </td> </tr> <tr> <td> NorthstarSensorLibraryReportMagnitudesPacket.cs</td> <td> Represents the magnitudes of the spots. </td> </tr> <tr> <td> NorthstarSensorLibraryReportPacket.cs</td> <td> Represents the command to get the position information from the sensor. </td> </tr> <tr> <td> NorthstarSensorLibraryReportPoseFlag.cs</td> <td> Enum defining flags for position reporting. </td> </tr> <tr> <td> NorthstarSensorLibraryReportPosePacket.cs</td> <td> Represents the position received from the sensor. </td> </tr> <tr> <td> NorthstarSensorLibraryReportSpotPositionPacket.cs</td> <td> Represents the position of the spots received from the sensor. </td> </tr> <tr> <td> NorthstarSensorLibraryReportSpotsFlag.cs</td> <td> Enum defining flags for which spots are to be used by the sensor. </td> </tr> <tr> <td> NorthstarSensorLibraryResponsePacket.cs</td> <td> Represents the generic response from the device. </td> </tr> <tr> <td> NorthstarSensorLibraryResync.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibrarySendablePacket.cs</td> <td> Abstract class representing common properties of packets that can be send to the sensor. </td> </tr> <tr> <td> NorthstarSensorLibrarySensorChannel.cs</td> <td> Handles configuration of the serial port in compliance with the protocol specification, handles sending data to the port, and defines the events that get fired when different packets get received from the sensor. </td> </tr> <tr> <td> NorthstarSensorLibrarySetBaudRatePacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibrarySetCeilingPacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibrarySetFrequencyDeltaPacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibrarySetNSamplesPacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibrarySetReportFlags.cs</td> <td> Configures the values to be used in conjunction with the Report or ContinuousReport commands. </td> </tr> <tr> <td> NorthstarSensorLibrarySetRoomSpotAssignmentPacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibrarySetThreshold.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibraryStopReportPacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibraryThresholdResponsePacket.cs</td> <td> Not fully implemented because not needed for positioning, but part of the protocol. </td> </tr> <tr> <td> NorthstarSensorLibraryVersionResponsePacket.cs</td> <td> Represents the version information received from a GetVersion request. </td> </tr> </table> </body> </html> </html>
</DOC>
